// This file was auto-generated by the veyron vdl tool.
// Source(s):  test_base.vdl
package com.veyron.tools.vrpc.test_base.gen_impl;

import com.google.common.reflect.TypeToken;
import com.veyron.tools.vrpc.test_base.Struct;
import com.veyron.tools.vrpc.test_base.TypeTester;
import com.veyron.tools.vrpc.test_base.TypeTesterFactory;
import com.veyron.tools.vrpc.test_base.TypeTesterService;
import com.veyron2.ipc.ServerCall;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.Stream;
import java.util.ArrayList;
import java.util.HashMap;

public class TypeTesterServiceWrapper {

	private final TypeTesterService service;

	public TypeTesterServiceWrapper(TypeTesterService service) {
		this.service = service;
	}
	/**
	 * Returns all tags associated with the provided method or null if the method isn't implemented
	 * by this service.
	 */
	public Object[] getMethodTags(ServerCall call, String method) { 
		if (method == "EchoBool") {
			return new Object[]{  };
		}
		if (method == "EchoFloat32") {
			return new Object[]{  };
		}
		if (method == "EchoFloat64") {
			return new Object[]{  };
		}
		if (method == "EchoInt32") {
			return new Object[]{  };
		}
		if (method == "EchoInt64") {
			return new Object[]{  };
		}
		if (method == "EchoString") {
			return new Object[]{  };
		}
		if (method == "EchoByte") {
			return new Object[]{  };
		}
		if (method == "EchoUInt32") {
			return new Object[]{  };
		}
		if (method == "EchoUInt64") {
			return new Object[]{  };
		}
		if (method == "InputArray") {
			return new Object[]{  };
		}
		if (method == "InputMap") {
			return new Object[]{  };
		}
		if (method == "InputSlice") {
			return new Object[]{  };
		}
		if (method == "InputStruct") {
			return new Object[]{  };
		}
		if (method == "OutputArray") {
			return new Object[]{  };
		}
		if (method == "OutputMap") {
			return new Object[]{  };
		}
		if (method == "OutputSlice") {
			return new Object[]{  };
		}
		if (method == "OutputStruct") {
			return new Object[]{  };
		}
		if (method == "NoArguments") {
			return new Object[]{  };
		}
		if (method == "MultipleArguments") {
			return new Object[]{  };
		}
		if (method == "StreamingOutput") {
			return new Object[]{  };
		}
		return null;
	}
	// Methods from interface TypeTester.
	public boolean echoBool(ServerCall call, boolean I1) throws VeyronException { 
		return this.service.echoBool(call, I1);
	}
	public float echoFloat32(ServerCall call, float I1) throws VeyronException { 
		return this.service.echoFloat32(call, I1);
	}
	public double echoFloat64(ServerCall call, double I1) throws VeyronException { 
		return this.service.echoFloat64(call, I1);
	}
	public int echoInt32(ServerCall call, int I1) throws VeyronException { 
		return this.service.echoInt32(call, I1);
	}
	public long echoInt64(ServerCall call, long I1) throws VeyronException { 
		return this.service.echoInt64(call, I1);
	}
	public String echoString(ServerCall call, String I1) throws VeyronException { 
		return this.service.echoString(call, I1);
	}
	public byte echoByte(ServerCall call, byte I1) throws VeyronException { 
		return this.service.echoByte(call, I1);
	}
	public int echoUInt32(ServerCall call, int I1) throws VeyronException { 
		return this.service.echoUInt32(call, I1);
	}
	public long echoUInt64(ServerCall call, long I1) throws VeyronException { 
		return this.service.echoUInt64(call, I1);
	}
	public void inputArray(ServerCall call, byte[] I1) throws VeyronException { 
		this.service.inputArray(call, I1);
	}
	public void inputMap(ServerCall call, HashMap<Byte, Byte> I1) throws VeyronException { 
		this.service.inputMap(call, I1);
	}
	public void inputSlice(ServerCall call, ArrayList<Byte> I1) throws VeyronException { 
		this.service.inputSlice(call, I1);
	}
	public void inputStruct(ServerCall call, Struct I1) throws VeyronException { 
		this.service.inputStruct(call, I1);
	}
	public byte[] outputArray(ServerCall call) throws VeyronException { 
		return this.service.outputArray(call);
	}
	public HashMap<Byte, Byte> outputMap(ServerCall call) throws VeyronException { 
		return this.service.outputMap(call);
	}
	public ArrayList<Byte> outputSlice(ServerCall call) throws VeyronException { 
		return this.service.outputSlice(call);
	}
	public Struct outputStruct(ServerCall call) throws VeyronException { 
		return this.service.outputStruct(call);
	}
	public void noArguments(ServerCall call) throws VeyronException { 
		this.service.noArguments(call);
	}
	public TypeTesterService.MultipleArgumentsOut multipleArguments(ServerCall call, int I1, int I2) throws VeyronException { 
		return this.service.multipleArguments(call, I1, I2);
	}
	public void streamingOutput(ServerCall call, int NumStreamItems, boolean StreamItem) throws VeyronException { 
		final ServerCall serverCall = call;
		final Stream<Boolean,Void> stream = new Stream<Boolean,Void>() {
			@Override
			public void send(Boolean item) throws VeyronException {
				serverCall.send(item);
			}
			@Override
			public Void recv() throws java.io.EOFException, VeyronException {
				final TypeToken<?> type = new TypeToken<Void>() {};
				final Object result = serverCall.recv(type);
				try {
					return (Void)result;
				} catch (java.lang.ClassCastException e) {
					throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
		};
		this.service.streamingOutput(call, NumStreamItems, StreamItem, stream);
	}
}
