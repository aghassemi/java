// This file was auto-generated by the veyron vdl tool.
// Source(s):  service.vdl
package com.veyron.examples.rockpaperscissors.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.ipc.ServerCall;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.Stream;

public class Server { 
	/* Server stub creation methods for interfaces in file: service.vdl. */
	public static Object newJudge(JudgeService service) { 
		return new JudgeStub(service);
	}
	public static Object newPlayer(PlayerService service) { 
		return new PlayerStub(service);
	}
	public static Object newScoreKeeper(ScoreKeeperService service) { 
		return new ScoreKeeperStub(service);
	}
	public static Object newRockPaperScissors(RockPaperScissorsService service) { 
		final Server.JudgeStub judge = (Server.JudgeStub)Server.newJudge(service);
		final Server.PlayerStub player = (Server.PlayerStub)Server.newPlayer(service);
		final Server.ScoreKeeperStub scoreKeeper = (Server.ScoreKeeperStub)Server.newScoreKeeper(service);
		return new RockPaperScissorsStub(service, judge, player, scoreKeeper);
	}
	
	/* Server stubs for interfaces in file: service.vdl. */
	public static class JudgeStub {
		private final JudgeService service;

		JudgeStub(JudgeService service) {
			this.service = service;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			if (method == "CreateGame") {
				return new Object[]{  };
			}
			if (method == "Play") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface Judge.
		public GameID createGame(ServerCall call, GameOptions Opts) throws VeyronException { 
			return this.service.createGame(call, Opts);
		}
		public PlayResult play(ServerCall call, GameID ID) throws VeyronException { 
			final ServerCall serverCall = call;
			final Stream<JudgeAction,PlayerAction> stream = new Stream<JudgeAction,PlayerAction>() {
				@Override
				public void send(JudgeAction item) throws VeyronException {
					serverCall.send(item);
				}
				@Override
				public PlayerAction recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<PlayerAction>() {};
					final Object result = serverCall.recv(type);
					try {
						return (PlayerAction)result;
					} catch (java.lang.ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
			};
			return this.service.play(call, ID, stream);
		}
	}
	public static class PlayerStub {
		private final PlayerService service;

		PlayerStub(PlayerService service) {
			this.service = service;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			if (method == "Challenge") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface Player.
		public void challenge(ServerCall call, String Address, GameID ID, GameOptions Opts) throws VeyronException { 
			this.service.challenge(call, Address, ID, Opts);
		}
	}
	public static class ScoreKeeperStub {
		private final ScoreKeeperService service;

		ScoreKeeperStub(ScoreKeeperService service) {
			this.service = service;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			if (method == "Record") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface ScoreKeeper.
		public void record(ServerCall call, ScoreCard Score) throws VeyronException { 
			this.service.record(call, Score);
		}
	}
	public static class RockPaperScissorsStub {
		private final RockPaperScissorsService service;
		private final Server.JudgeStub judge;
		private final Server.PlayerStub player;
		private final Server.ScoreKeeperStub scoreKeeper;

		RockPaperScissorsStub(RockPaperScissorsService service, Server.JudgeStub judge, Server.PlayerStub player, Server.ScoreKeeperStub scoreKeeper) {
			this.service = service;
			this.judge = judge;
			this.player = player;
			this.scoreKeeper = scoreKeeper;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			{
				final Object[] tags = this.judge.getMethodTags(call, method);
				if (tags != null) return tags;
			}
			{
				final Object[] tags = this.player.getMethodTags(call, method);
				if (tags != null) return tags;
			}
			{
				final Object[] tags = this.scoreKeeper.getMethodTags(call, method);
				if (tags != null) return tags;
			}
			return null;
		}
		// Methods from interface RockPaperScissors.
		// Methods from sub-interface Judge.
		public GameID createGame(ServerCall call, GameOptions Opts) throws VeyronException {
			return this.judge.createGame(call, Opts);
		}
		public PlayResult play(ServerCall call, GameID ID) throws VeyronException {
			return this.judge.play(call, ID);
		}
		// Methods from sub-interface Player.
		public void challenge(ServerCall call, String Address, GameID ID, GameOptions Opts) throws VeyronException {
			this.player.challenge(call, Address, ID, Opts);
		}
		// Methods from sub-interface ScoreKeeper.
		public void record(ServerCall call, ScoreCard Score) throws VeyronException {
			this.scoreKeeper.record(call, Score);
		}
	}
}
