// This file was auto-generated by the veyron vdl tool.
// Source(s):  service.vdl
package com.veyron.examples.rockpaperscissors.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.OptionDefs;
import com.veyron2.Options;
import com.veyron2.RuntimeFactory;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.ClientStream;

public class Client { 
	/* Bind methods for interfaces in file: service.vdl. */
	public static Judge bindJudge(String name) throws VeyronException {
		return bindJudge(name, null);
	}
	public static Judge bindJudge(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new JudgeStub(client, name);
	}
	public static Player bindPlayer(String name) throws VeyronException {
		return bindPlayer(name, null);
	}
	public static Player bindPlayer(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new PlayerStub(client, name);
	}
	public static ScoreKeeper bindScoreKeeper(String name) throws VeyronException {
		return bindScoreKeeper(name, null);
	}
	public static ScoreKeeper bindScoreKeeper(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new ScoreKeeperStub(client, name);
	}
	public static RockPaperScissors bindRockPaperScissors(String name) throws VeyronException {
		return bindRockPaperScissors(name, null);
	}
	public static RockPaperScissors bindRockPaperScissors(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		final Judge judge = Client.bindJudge(name, veyronOpts);
		final Player player = Client.bindPlayer(name, veyronOpts);
		final ScoreKeeper scoreKeeper = Client.bindScoreKeeper(name, veyronOpts);
		return new RockPaperScissorsStub(client, name, judge, player, scoreKeeper);
	}

	/* Client stubs for interfaces in file: service.vdl. */
	private static class JudgeStub implements Judge {
		private static final String vdlIfacePathOpt = "com.veyron.examples.rockpaperscissors.vdlgen.Judge";
		private final com.veyron2.ipc.Client client;
		private final String name;

		JudgeStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Judge.
		@Override
		public GameID createGame(Context context, GameOptions Opts) throws VeyronException {
			return createGame(context, Opts, null);
		}
		@Override
		public GameID createGame(Context context, GameOptions Opts, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Opts };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, JudgeStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "CreateGame", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<GameID>() {} };
			return (GameID)call.finish(resultTypes)[0];

		}
		@Override
		public ClientStream<PlayerAction,JudgeAction,PlayResult> play(Context context, GameID ID) throws VeyronException {
			return play(context, ID, null);
		}
		@Override
		public ClientStream<PlayerAction,JudgeAction,PlayResult> play(Context context, GameID ID, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ ID };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, JudgeStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Play", inArgs, veyronOpts);

			return new ClientStream<PlayerAction, JudgeAction, PlayResult>() {
				@Override
				public void send(PlayerAction item) throws VeyronException {
					call.send(item);
				}
				@Override
				public JudgeAction recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<JudgeAction>() {};
					final Object result = call.recv(type);
					try {
						return (JudgeAction)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public PlayResult finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<PlayResult>() {} };
					return (PlayResult)call.finish(resultTypes)[0];

				}
			};
		}
	}
	private static class PlayerStub implements Player {
		private static final String vdlIfacePathOpt = "com.veyron.examples.rockpaperscissors.vdlgen.Player";
		private final com.veyron2.ipc.Client client;
		private final String name;

		PlayerStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Player.
		@Override
		public void challenge(Context context, String Address, GameID ID, GameOptions Opts) throws VeyronException {
			challenge(context, Address, ID, Opts, null);
		}
		@Override
		public void challenge(Context context, String Address, GameID ID, GameOptions Opts, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Address, ID, Opts };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, PlayerStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Challenge", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
	}
	private static class ScoreKeeperStub implements ScoreKeeper {
		private static final String vdlIfacePathOpt = "com.veyron.examples.rockpaperscissors.vdlgen.ScoreKeeper";
		private final com.veyron2.ipc.Client client;
		private final String name;

		ScoreKeeperStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface ScoreKeeper.
		@Override
		public void record(Context context, ScoreCard Score) throws VeyronException {
			record(context, Score, null);
		}
		@Override
		public void record(Context context, ScoreCard Score, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Score };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ScoreKeeperStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Record", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
	}
	private static class RockPaperScissorsStub implements RockPaperScissors {
		private static final String vdlIfacePathOpt = "com.veyron.examples.rockpaperscissors.vdlgen.RockPaperScissors";
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final Judge judge;
		private final Player player;
		private final ScoreKeeper scoreKeeper;

		RockPaperScissorsStub(com.veyron2.ipc.Client client, String name, Judge judge, Player player, ScoreKeeper scoreKeeper) {
			this.client = client;
			this.name = name;
			this.judge = judge;
			this.player = player;
			this.scoreKeeper = scoreKeeper;
		}
		// Methods from sub-interface Judge.
		@Override
		public GameID createGame(Context context, GameOptions Opts) throws VeyronException {
			return createGame(context, Opts, null);
		}
		@Override
		public GameID createGame(Context context, GameOptions Opts, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, RockPaperScissorsStub.vdlIfacePathOpt);
			}
			return this.judge.createGame(context, Opts, veyronOpts);
		}
		@Override
		public ClientStream<PlayerAction,JudgeAction,PlayResult> play(Context context, GameID ID) throws VeyronException {
			return play(context, ID, null);
		}
		@Override
		public ClientStream<PlayerAction,JudgeAction,PlayResult> play(Context context, GameID ID, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, RockPaperScissorsStub.vdlIfacePathOpt);
			}
			return this.judge.play(context, ID, veyronOpts);
		}
		// Methods from sub-interface Player.
		@Override
		public void challenge(Context context, String Address, GameID ID, GameOptions Opts) throws VeyronException {
			challenge(context, Address, ID, Opts, null);
		}
		@Override
		public void challenge(Context context, String Address, GameID ID, GameOptions Opts, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, RockPaperScissorsStub.vdlIfacePathOpt);
			}
			this.player.challenge(context, Address, ID, Opts, veyronOpts);
		}
		// Methods from sub-interface ScoreKeeper.
		@Override
		public void record(Context context, ScoreCard Score) throws VeyronException {
			record(context, Score, null);
		}
		@Override
		public void record(Context context, ScoreCard Score, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, RockPaperScissorsStub.vdlIfacePathOpt);
			}
			this.scoreKeeper.record(context, Score, veyronOpts);
		}
	}
}
