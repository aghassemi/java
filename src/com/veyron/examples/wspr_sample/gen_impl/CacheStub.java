// This file was auto-generated by the veyron vdl tool.
// Source(s):  error_thrower.vdl cache.vdl
package com.veyron.examples.wspr_sample.gen_impl;

import com.veyron.examples.wspr_sample.Cache;
import com.veyron.examples.wspr_sample.CacheFactory;
import com.veyron.examples.wspr_sample.CacheService;
import com.veyron.examples.wspr_sample.ErrorThrower;
import com.veyron.examples.wspr_sample.ErrorThrowerFactory;
import com.veyron.examples.wspr_sample.ErrorThrowerService;
import com.veyron.examples.wspr_sample.KeyValuePair;

/* Client stub for interface: Cache. */
public final class CacheStub implements Cache {
	private static final java.lang.String vdlIfacePathOpt = "com.veyron.examples.wspr_sample.Cache";
	private final com.veyron2.ipc.Client client;
	private final java.lang.String name;

	public CacheStub(com.veyron2.ipc.Client client, java.lang.String name) {
		this.client = client;
		this.name = name;
	}
	// Methods from interface Cache.
	@Override
	public void set(com.veyron2.ipc.Context context, java.lang.String key, java.lang.Object value) throws com.veyron2.ipc.VeyronException {
		set(context, key, value, null);
	}
	@Override
	public void set(com.veyron2.ipc.Context context, java.lang.String key, java.lang.Object value, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key, value };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Set", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
			call.finish(resultTypes);

	}
	@Override
	public java.lang.Object get(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return get(context, key, null);
	}
	@Override
	public java.lang.Object get(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Get", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Object>() {} };
			return (java.lang.Object)call.finish(resultTypes)[0];

	}
	@Override
	public byte getAsByte(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsByte(context, key, null);
	}
	@Override
	public byte getAsByte(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsByte", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Byte>() {} };
			return (java.lang.Byte)call.finish(resultTypes)[0];

	}
	@Override
	public int getAsInt32(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsInt32(context, key, null);
	}
	@Override
	public int getAsInt32(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsInt32", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Integer>() {} };
			return (java.lang.Integer)call.finish(resultTypes)[0];

	}
	@Override
	public long getAsInt64(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsInt64(context, key, null);
	}
	@Override
	public long getAsInt64(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsInt64", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Long>() {} };
			return (java.lang.Long)call.finish(resultTypes)[0];

	}
	@Override
	public int getAsUint32(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsUint32(context, key, null);
	}
	@Override
	public int getAsUint32(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsUint32", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Integer>() {} };
			return (java.lang.Integer)call.finish(resultTypes)[0];

	}
	@Override
	public long getAsUint64(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsUint64(context, key, null);
	}
	@Override
	public long getAsUint64(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsUint64", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Long>() {} };
			return (java.lang.Long)call.finish(resultTypes)[0];

	}
	@Override
	public float getAsFloat32(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsFloat32(context, key, null);
	}
	@Override
	public float getAsFloat32(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsFloat32", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Float>() {} };
			return (java.lang.Float)call.finish(resultTypes)[0];

	}
	@Override
	public double getAsFloat64(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsFloat64(context, key, null);
	}
	@Override
	public double getAsFloat64(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsFloat64", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Double>() {} };
			return (java.lang.Double)call.finish(resultTypes)[0];

	}
	@Override
	public java.lang.String getAsString(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsString(context, key, null);
	}
	@Override
	public java.lang.String getAsString(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsString", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.String>() {} };
			return (java.lang.String)call.finish(resultTypes)[0];

	}
	@Override
	public boolean getAsBool(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsBool(context, key, null);
	}
	@Override
	public boolean getAsBool(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsBool", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Boolean>() {} };
			return (java.lang.Boolean)call.finish(resultTypes)[0];

	}
	@Override
	public com.veyron2.ipc.VeyronException getAsError(com.veyron2.ipc.Context context, java.lang.String key) throws com.veyron2.ipc.VeyronException {
		return getAsError(context, key, null);
	}
	@Override
	public com.veyron2.ipc.VeyronException getAsError(com.veyron2.ipc.Context context, java.lang.String key, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ key };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GetAsError", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<com.veyron2.ipc.VeyronException>() {} };
			return (com.veyron2.ipc.VeyronException)call.finish(resultTypes)[0];

	}
	@Override
	public java.util.HashMap<java.lang.String, java.lang.Object> asMap(com.veyron2.ipc.Context context) throws com.veyron2.ipc.VeyronException {
		return asMap(context, null);
	}
	@Override
	public java.util.HashMap<java.lang.String, java.lang.Object> asMap(com.veyron2.ipc.Context context, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{  };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "AsMap", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.util.HashMap<java.lang.String, java.lang.Object>>() {} };
			return (java.util.HashMap<java.lang.String, java.lang.Object>)call.finish(resultTypes)[0];

	}
	@Override
	public java.util.ArrayList<KeyValuePair> keyValuePairs(com.veyron2.ipc.Context context) throws com.veyron2.ipc.VeyronException {
		return keyValuePairs(context, null);
	}
	@Override
	public java.util.ArrayList<KeyValuePair> keyValuePairs(com.veyron2.ipc.Context context, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{  };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "KeyValuePairs", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.util.ArrayList<KeyValuePair>>() {} };
			return (java.util.ArrayList<KeyValuePair>)call.finish(resultTypes)[0];

	}
	@Override
	public Cache.MostRecentSetOut mostRecentSet(com.veyron2.ipc.Context context) throws com.veyron2.ipc.VeyronException {
		return mostRecentSet(context, null);
	}
	@Override
	public Cache.MostRecentSetOut mostRecentSet(com.veyron2.ipc.Context context, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{  };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MostRecentSet", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<KeyValuePair>() {}, new com.google.common.reflect.TypeToken<java.lang.Long>() {} };
			final java.lang.Object[] results = call.finish(resultTypes);
			// Pack the results.
			final Cache.MostRecentSetOut ret = new Cache.MostRecentSetOut();
			int resultIdx = 0;
			ret.value = (KeyValuePair)results[resultIdx++];
			ret.time = (java.lang.Long)results[resultIdx++];
			return ret;

	}
	@Override
	public java.lang.String[] keyPage(com.veyron2.ipc.Context context, long index) throws com.veyron2.ipc.VeyronException {
		return keyPage(context, index, null);
	}
	@Override
	public java.lang.String[] keyPage(com.veyron2.ipc.Context context, long index, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(index) };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "KeyPage", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.String[]>() {} };
			return (java.lang.String[])call.finish(resultTypes)[0];

	}
	@Override
	public long size(com.veyron2.ipc.Context context) throws com.veyron2.ipc.VeyronException {
		return size(context, null);
	}
	@Override
	public long size(com.veyron2.ipc.Context context, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{  };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Size", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Long>() {} };
			return (java.lang.Long)call.finish(resultTypes)[0];

	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.String,java.lang.Object,java.lang.Void> multiGet(com.veyron2.ipc.Context context) throws com.veyron2.ipc.VeyronException {
		return multiGet(context, null);
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.String,java.lang.Object,java.lang.Void> multiGet(com.veyron2.ipc.Context context, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{  };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, CacheStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MultiGet", inArgs, veyronOpts);

		return new com.veyron2.vdl.ClientStream<java.lang.String, java.lang.Object, java.lang.Void>() {
			@Override
			public void send(java.lang.String item) throws com.veyron2.ipc.VeyronException {
				call.send(item);
			}
			@Override
			public java.lang.Object recv() throws java.io.EOFException, com.veyron2.ipc.VeyronException {
				final com.google.common.reflect.TypeToken<?> type = new com.google.common.reflect.TypeToken<java.lang.Object>() {};
				final java.lang.Object result = call.recv(type);
				try {
					return (java.lang.Object)result;
				} catch (java.lang.ClassCastException e) {
					throw new com.veyron2.ipc.VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
			@Override
			public java.lang.Void finish() throws com.veyron2.ipc.VeyronException {
				// Prepare output argument and finish the call.
					final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

			}
		};
	}
}
