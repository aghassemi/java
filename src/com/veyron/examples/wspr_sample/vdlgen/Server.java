// This file was auto-generated by the veyron vdl tool.
// Source(s):  error_thrower.vdl cache.vdl
package com.veyron.examples.wspr_sample.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.ipc.ServerCall;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.Stream;
import java.util.ArrayList;
import java.util.HashMap;

public class Server { 
	/* Server stub creation methods for interfaces in file: error_thrower.vdl. */
	public static Object newErrorThrower(ErrorThrowerService service) { 
		return new ErrorThrowerStub(service);
	}
	/* Server stub creation methods for interfaces in file: cache.vdl. */
	public static Object newCache(CacheService service) { 
		return new CacheStub(service);
	}
	
	/* Server stubs for interfaces in file: error_thrower.vdl. */
	public static class ErrorThrowerStub {
		private final ErrorThrowerService service;

		ErrorThrowerStub(ErrorThrowerService service) {
			this.service = service;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			if (method == "ThrowAborted") {
				return new Object[]{  };
			}
			if (method == "ThrowBadArg") {
				return new Object[]{  };
			}
			if (method == "ThrowBadProtocol") {
				return new Object[]{  };
			}
			if (method == "ThrowInternal") {
				return new Object[]{  };
			}
			if (method == "ThrowNotAuthorized") {
				return new Object[]{  };
			}
			if (method == "ThrowNotFound") {
				return new Object[]{  };
			}
			if (method == "ThrowUnknown") {
				return new Object[]{  };
			}
			if (method == "ThrowGoError") {
				return new Object[]{  };
			}
			if (method == "ThrowCustomStandardError") {
				return new Object[]{  };
			}
			if (method == "ListAllBuiltInErrorIDs") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface ErrorThrower.
		public void throwAborted(ServerCall call) throws VeyronException { 
			this.service.throwAborted(call);
		}
		public void throwBadArg(ServerCall call) throws VeyronException { 
			this.service.throwBadArg(call);
		}
		public void throwBadProtocol(ServerCall call) throws VeyronException { 
			this.service.throwBadProtocol(call);
		}
		public void throwInternal(ServerCall call) throws VeyronException { 
			this.service.throwInternal(call);
		}
		public void throwNotAuthorized(ServerCall call) throws VeyronException { 
			this.service.throwNotAuthorized(call);
		}
		public void throwNotFound(ServerCall call) throws VeyronException { 
			this.service.throwNotFound(call);
		}
		public void throwUnknown(ServerCall call) throws VeyronException { 
			this.service.throwUnknown(call);
		}
		public void throwGoError(ServerCall call) throws VeyronException { 
			this.service.throwGoError(call);
		}
		public void throwCustomStandardError(ServerCall call) throws VeyronException { 
			this.service.throwCustomStandardError(call);
		}
		public ArrayList<String> listAllBuiltInErrorIDs(ServerCall call) throws VeyronException { 
			return this.service.listAllBuiltInErrorIDs(call);
		}
	}
	/* Server stubs for interfaces in file: cache.vdl. */
	public static class CacheStub {
		private final CacheService service;

		CacheStub(CacheService service) {
			this.service = service;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			if (method == "Set") {
				return new Object[]{  };
			}
			if (method == "Get") {
				return new Object[]{  };
			}
			if (method == "GetAsByte") {
				return new Object[]{  };
			}
			if (method == "GetAsInt32") {
				return new Object[]{  };
			}
			if (method == "GetAsInt64") {
				return new Object[]{  };
			}
			if (method == "GetAsUint32") {
				return new Object[]{  };
			}
			if (method == "GetAsUint64") {
				return new Object[]{  };
			}
			if (method == "GetAsFloat32") {
				return new Object[]{  };
			}
			if (method == "GetAsFloat64") {
				return new Object[]{  };
			}
			if (method == "GetAsString") {
				return new Object[]{  };
			}
			if (method == "GetAsBool") {
				return new Object[]{  };
			}
			if (method == "GetAsError") {
				return new Object[]{  };
			}
			if (method == "AsMap") {
				return new Object[]{  };
			}
			if (method == "KeyValuePairs") {
				return new Object[]{  };
			}
			if (method == "MostRecentSet") {
				return new Object[]{  };
			}
			if (method == "KeyPage") {
				return new Object[]{  };
			}
			if (method == "Size") {
				return new Object[]{  };
			}
			if (method == "MultiGet") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface Cache.
		public void set(ServerCall call, String key, Object value) throws VeyronException { 
			this.service.set(call, key, value);
		}
		public Object get(ServerCall call, String key) throws VeyronException { 
			return this.service.get(call, key);
		}
		public byte getAsByte(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsByte(call, key);
		}
		public int getAsInt32(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsInt32(call, key);
		}
		public long getAsInt64(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsInt64(call, key);
		}
		public int getAsUint32(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsUint32(call, key);
		}
		public long getAsUint64(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsUint64(call, key);
		}
		public float getAsFloat32(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsFloat32(call, key);
		}
		public double getAsFloat64(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsFloat64(call, key);
		}
		public String getAsString(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsString(call, key);
		}
		public boolean getAsBool(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsBool(call, key);
		}
		public VeyronException getAsError(ServerCall call, String key) throws VeyronException { 
			return this.service.getAsError(call, key);
		}
		public HashMap<String, Object> asMap(ServerCall call) throws VeyronException { 
			return this.service.asMap(call);
		}
		public ArrayList<KeyValuePair> keyValuePairs(ServerCall call) throws VeyronException { 
			return this.service.keyValuePairs(call);
		}
		public CacheService.MostRecentSetOut mostRecentSet(ServerCall call) throws VeyronException { 
			return this.service.mostRecentSet(call);
		}
		public String[] keyPage(ServerCall call, long index) throws VeyronException { 
			return this.service.keyPage(call, index);
		}
		public long size(ServerCall call) throws VeyronException { 
			return this.service.size(call);
		}
		public void multiGet(ServerCall call) throws VeyronException { 
			final ServerCall serverCall = call;
			final Stream<Object,String> stream = new Stream<Object,String>() {
				@Override
				public void send(Object item) throws VeyronException {
					serverCall.send(item);
				}
				@Override
				public String recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<String>() {};
					final Object result = serverCall.recv(type);
					try {
						return (String)result;
					} catch (java.lang.ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
			};
			this.service.multiGet(call, stream);
		}
	}
}
