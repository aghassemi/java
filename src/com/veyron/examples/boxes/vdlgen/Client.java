// This file was auto-generated by the veyron vdl tool.
// Source(s):  boxes.vdl
package com.veyron.examples.boxes.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.OptionDefs;
import com.veyron2.Options;
import com.veyron2.RuntimeFactory;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.ClientStream;

public class Client { 
	/* Bind methods for interfaces in file: boxes.vdl. */
	public static BoxSignalling bindBoxSignalling(String name) throws VeyronException {
		return bindBoxSignalling(name, null);
	}
	public static BoxSignalling bindBoxSignalling(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new BoxSignallingStub(client, name);
	}
	public static DrawInterface bindDrawInterface(String name) throws VeyronException {
		return bindDrawInterface(name, null);
	}
	public static DrawInterface bindDrawInterface(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new DrawInterfaceStub(client, name);
	}

	/* Client stubs for interfaces in file: boxes.vdl. */
	private static class BoxSignallingStub implements BoxSignalling {
		private static final String vdlIfacePathOpt = "com.veyron.examples.boxes.vdlgen.BoxSignalling";
		private final com.veyron2.ipc.Client client;
		private final String name;

		BoxSignallingStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface BoxSignalling.
		@Override
		public void add(Context context, String Endpoint) throws VeyronException {
			add(context, Endpoint, null);
		}
		@Override
		public void add(Context context, String Endpoint, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Endpoint };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, BoxSignallingStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Add", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public String get(Context context) throws VeyronException {
			return get(context, null);
		}
		@Override
		public String get(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, BoxSignallingStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Get", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<String>() {} };
			return (String)call.finish(resultTypes)[0];

		}
	}
	private static class DrawInterfaceStub implements DrawInterface {
		private static final String vdlIfacePathOpt = "com.veyron.examples.boxes.vdlgen.DrawInterface";
		private final com.veyron2.ipc.Client client;
		private final String name;

		DrawInterfaceStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface DrawInterface.
		@Override
		public ClientStream<Box,Box,Void> draw(Context context) throws VeyronException {
			return draw(context, null);
		}
		@Override
		public ClientStream<Box,Box,Void> draw(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, DrawInterfaceStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Draw", inArgs, veyronOpts);

			return new ClientStream<Box, Box, Void>() {
				@Override
				public void send(Box item) throws VeyronException {
					call.send(item);
				}
				@Override
				public Box recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Box>() {};
					final Object result = call.recv(type);
					try {
						return (Box)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public Void finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

				}
			};
		}
		@Override
		public void syncBoxes(Context context) throws VeyronException {
			syncBoxes(context, null);
		}
		@Override
		public void syncBoxes(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, DrawInterfaceStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "SyncBoxes", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
	}
}
