// This file was auto-generated by the veyron vdl tool.
// Source(s):  boxes.vdl
package com.veyron.examples.boxes.gen_impl;

import com.veyron.examples.boxes.Box;
import com.veyron.examples.boxes.BoxSignalling;
import com.veyron.examples.boxes.BoxSignallingFactory;
import com.veyron.examples.boxes.BoxSignallingService;
import com.veyron.examples.boxes.DrawInterface;
import com.veyron.examples.boxes.DrawInterfaceFactory;
import com.veyron.examples.boxes.DrawInterfaceService;

/* Client stub for interface: BoxSignalling. */
public final class BoxSignallingStub implements BoxSignalling {
	private static final java.lang.String vdlIfacePathOpt = "com.veyron.examples.boxes.BoxSignalling";
	private final com.veyron2.ipc.Client client;
	private final java.lang.String name;

	public BoxSignallingStub(com.veyron2.ipc.Client client, java.lang.String name) {
		this.client = client;
		this.name = name;
	}
	// Methods from interface BoxSignalling.
	@Override
	public void add(com.veyron2.ipc.Context context, java.lang.String Endpoint) throws com.veyron2.ipc.VeyronException {
		add(context, Endpoint, null);
	}
	@Override
	public void add(com.veyron2.ipc.Context context, java.lang.String Endpoint, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ Endpoint };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, BoxSignallingStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Add", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
			call.finish(resultTypes);

	}
	@Override
	public java.lang.String get(com.veyron2.ipc.Context context) throws com.veyron2.ipc.VeyronException {
		return get(context, null);
	}
	@Override
	public java.lang.String get(com.veyron2.ipc.Context context, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{  };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, BoxSignallingStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Get", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.String>() {} };
			return (java.lang.String)call.finish(resultTypes)[0];

	}
}
