// This file was auto-generated by the veyron vdl tool.
// Source(s):  inspector.vdl
package com.veyron.examples.inspector.gen_impl;

import com.google.common.reflect.TypeToken;
import com.veyron.examples.inspector.Details;
import com.veyron.examples.inspector.Inspector;
import com.veyron.examples.inspector.InspectorFactory;
import com.veyron.examples.inspector.InspectorService;
import com.veyron2.ipc.ServerCall;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.Stream;

public class InspectorServiceWrapper {

	private final InspectorService service;

	public InspectorServiceWrapper(InspectorService service) {
		this.service = service;
	}
	/**
	 * Returns all tags associated with the provided method or null if the method isn't implemented
	 * by this service.
	 */
	public Object[] getMethodTags(ServerCall call, String method) throws VeyronException { 
		if ("ls".equals(method)) {
			return new Object[]{  };
		}
		if ("lsDetails".equals(method)) {
			return new Object[]{  };
		}
        if ("getMethodTags".equals(method)) {
            return new Object[]{};
        }
		throw new VeyronException("method: " + method + " not found");
	}
	// Methods from interface Inspector.
	public void ls(ServerCall call, String Glob) throws VeyronException { 
		final ServerCall serverCall = call;
		final Stream<String,Void> stream = new Stream<String,Void>() {
			@Override
			public void send(String item) throws VeyronException {
				serverCall.send(item);
			}
			@Override
			public Void recv() throws java.io.EOFException, VeyronException {
				final TypeToken<?> type = new TypeToken<Void>() {};
				final Object result = serverCall.recv(type);
				try {
					return (Void)result;
				} catch (java.lang.ClassCastException e) {
					throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
		};
		this.service.ls(call, Glob, stream);
	}
	public void lsDetails(ServerCall call, String Glob) throws VeyronException { 
		final ServerCall serverCall = call;
		final Stream<Details,Void> stream = new Stream<Details,Void>() {
			@Override
			public void send(Details item) throws VeyronException {
				serverCall.send(item);
			}
			@Override
			public Void recv() throws java.io.EOFException, VeyronException {
				final TypeToken<?> type = new TypeToken<Void>() {};
				final Object result = serverCall.recv(type);
				try {
					return (Void)result;
				} catch (java.lang.ClassCastException e) {
					throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
		};
		this.service.lsDetails(call, Glob, stream);
	}
}
