// This file was auto-generated by the veyron vdl tool.
// Source(s):  repository.vdl
package com.veyron.services.mgmt.repository.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron.services.mgmt.profile.vdlgen.Specification;
import com.veyron2.OptionDefs;
import com.veyron2.Options;
import com.veyron2.RuntimeFactory;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import com.veyron2.services.mgmt.application.vdlgen.Envelope;
import java.util.ArrayList;

public class Client { 
	/* Bind methods for interfaces in file: repository.vdl. */
	public static Application bindApplication(String name) throws VeyronException {
		return bindApplication(name, null);
	}
	public static Application bindApplication(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		final com.veyron2.services.mgmt.repository.vdlgen.Application application = com.veyron2.services.mgmt.repository.vdlgen.Client.bindApplication(name, veyronOpts);
		return new ApplicationStub(client, name, application);
	}
	public static Profile bindProfile(String name) throws VeyronException {
		return bindProfile(name, null);
	}
	public static Profile bindProfile(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		final com.veyron2.services.mgmt.repository.vdlgen.Profile profile = com.veyron2.services.mgmt.repository.vdlgen.Client.bindProfile(name, veyronOpts);
		return new ProfileStub(client, name, profile);
	}

	/* Client stubs for interfaces in file: repository.vdl. */
	private static class ApplicationStub implements Application {
		private static final String vdlIfacePathOpt = "com.veyron.services.mgmt.repository.vdlgen.Application";
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final com.veyron2.services.mgmt.repository.vdlgen.Application application;

		ApplicationStub(com.veyron2.ipc.Client client, String name, com.veyron2.services.mgmt.repository.vdlgen.Application application) {
			this.client = client;
			this.name = name;
			this.application = application;
		}
		// Methods from interface Application.
		@Override
		public void put(Context context, ArrayList<String> Profiles, Envelope Envelope) throws VeyronException {
			put(context, Profiles, Envelope, null);
		}
		@Override
		public void put(Context context, ArrayList<String> Profiles, Envelope Envelope, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Profiles, Envelope };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ApplicationStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Put", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public void remove(Context context, String Profile) throws VeyronException {
			remove(context, Profile, null);
		}
		@Override
		public void remove(Context context, String Profile, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Profile };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ApplicationStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Remove", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		// Methods from sub-interface Application.
		@Override
		public Envelope match(Context context, ArrayList<String> Profiles) throws VeyronException {
			return match(context, Profiles, null);
		}
		@Override
		public Envelope match(Context context, ArrayList<String> Profiles, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ApplicationStub.vdlIfacePathOpt);
			}
			return this.application.match(context, Profiles, veyronOpts);
		}
	}
	private static class ProfileStub implements Profile {
		private static final String vdlIfacePathOpt = "com.veyron.services.mgmt.repository.vdlgen.Profile";
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final com.veyron2.services.mgmt.repository.vdlgen.Profile profile;

		ProfileStub(com.veyron2.ipc.Client client, String name, com.veyron2.services.mgmt.repository.vdlgen.Profile profile) {
			this.client = client;
			this.name = name;
			this.profile = profile;
		}
		// Methods from interface Profile.
		@Override
		public Specification specification(Context context) throws VeyronException {
			return specification(context, null);
		}
		@Override
		public Specification specification(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProfileStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Specification", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Specification>() {} };
			return (Specification)call.finish(resultTypes)[0];

		}
		@Override
		public void put(Context context, Specification Specification) throws VeyronException {
			put(context, Specification, null);
		}
		@Override
		public void put(Context context, Specification Specification, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Specification };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProfileStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Put", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public void remove(Context context) throws VeyronException {
			remove(context, null);
		}
		@Override
		public void remove(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProfileStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Remove", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		// Methods from sub-interface Profile.
		@Override
		public String label(Context context) throws VeyronException {
			return label(context, null);
		}
		@Override
		public String label(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProfileStub.vdlIfacePathOpt);
			}
			return this.profile.label(context, veyronOpts);
		}
		@Override
		public String description(Context context) throws VeyronException {
			return description(context, null);
		}
		@Override
		public String description(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProfileStub.vdlIfacePathOpt);
			}
			return this.profile.description(context, veyronOpts);
		}
	}
}
