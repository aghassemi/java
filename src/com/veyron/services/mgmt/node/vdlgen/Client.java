// This file was auto-generated by the veyron vdl tool.
// Source(s):  node.vdl
package com.veyron.services.mgmt.node.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.OptionDefs;
import com.veyron2.Options;
import com.veyron2.RuntimeFactory;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import com.veyron2.services.mgmt.build.vdlgen.BinaryDescription;
import com.veyron2.services.mgmt.node.vdlgen.Application;
import com.veyron2.services.mgmt.node.vdlgen.Description;

public class Client { 
	/* Bind methods for interfaces in file: node.vdl. */
	public static Config bindConfig(String name) throws VeyronException {
		return bindConfig(name, null);
	}
	public static Config bindConfig(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new ConfigStub(client, name);
	}
	public static Node bindNode(String name) throws VeyronException {
		return bindNode(name, null);
	}
	public static Node bindNode(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		final com.veyron2.services.mgmt.node.vdlgen.Node node = com.veyron2.services.mgmt.node.vdlgen.Client.bindNode(name, veyronOpts);
		final Config config = Client.bindConfig(name, veyronOpts);
		return new NodeStub(client, name, node, config);
	}

	/* Client stubs for interfaces in file: node.vdl. */
	private static class ConfigStub implements Config {
		private static final String vdlIfacePathOpt = "com.veyron.services.mgmt.node.vdlgen.Config";
		private final com.veyron2.ipc.Client client;
		private final String name;

		ConfigStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Config.
		@Override
		public void set(Context context, String key, String value) throws VeyronException {
			set(context, key, value, null);
		}
		@Override
		public void set(Context context, String key, String value, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ key, value };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ConfigStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Set", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
	}
	private static class NodeStub implements Node {
		private static final String vdlIfacePathOpt = "com.veyron.services.mgmt.node.vdlgen.Node";
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final com.veyron2.services.mgmt.node.vdlgen.Node node;
		private final Config config;

		NodeStub(com.veyron2.ipc.Client client, String name, com.veyron2.services.mgmt.node.vdlgen.Node node, Config config) {
			this.client = client;
			this.name = name;
			this.node = node;
			this.config = config;
		}
		// Methods from sub-interface Node.
		@Override
		public Description describe(Context context) throws VeyronException {
			return describe(context, null);
		}
		@Override
		public Description describe(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			return this.node.describe(context, veyronOpts);
		}
		@Override
		public boolean isRunnable(Context context, BinaryDescription Binary) throws VeyronException {
			return isRunnable(context, Binary, null);
		}
		@Override
		public boolean isRunnable(Context context, BinaryDescription Binary, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			return this.node.isRunnable(context, Binary, veyronOpts);
		}
		@Override
		public void reset(Context context, long Deadline) throws VeyronException {
			reset(context, Deadline, null);
		}
		@Override
		public void reset(Context context, long Deadline, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.reset(context, Deadline, veyronOpts);
		}
		@Override
		public String install(Context context) throws VeyronException {
			return install(context, null);
		}
		@Override
		public String install(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			return this.node.install(context, veyronOpts);
		}
		@Override
		public void refresh(Context context) throws VeyronException {
			refresh(context, null);
		}
		@Override
		public void refresh(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.refresh(context, veyronOpts);
		}
		@Override
		public void restart(Context context) throws VeyronException {
			restart(context, null);
		}
		@Override
		public void restart(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.restart(context, veyronOpts);
		}
		@Override
		public void resume(Context context) throws VeyronException {
			resume(context, null);
		}
		@Override
		public void resume(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.resume(context, veyronOpts);
		}
		@Override
		public void revert(Context context) throws VeyronException {
			revert(context, null);
		}
		@Override
		public void revert(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.revert(context, veyronOpts);
		}
		@Override
		public java.util.ArrayList<String> start(Context context) throws VeyronException {
			return start(context, null);
		}
		@Override
		public java.util.ArrayList<String> start(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			return this.node.start(context, veyronOpts);
		}
		@Override
		public void stop(Context context, long Deadline) throws VeyronException {
			stop(context, Deadline, null);
		}
		@Override
		public void stop(Context context, long Deadline, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.stop(context, Deadline, veyronOpts);
		}
		@Override
		public void suspend(Context context) throws VeyronException {
			suspend(context, null);
		}
		@Override
		public void suspend(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.suspend(context, veyronOpts);
		}
		@Override
		public void uninstall(Context context) throws VeyronException {
			uninstall(context, null);
		}
		@Override
		public void uninstall(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.uninstall(context, veyronOpts);
		}
		@Override
		public void update(Context context) throws VeyronException {
			update(context, null);
		}
		@Override
		public void update(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.node.update(context, veyronOpts);
		}
		// Methods from sub-interface Config.
		@Override
		public void set(Context context, String key, String value) throws VeyronException {
			set(context, key, value, null);
		}
		@Override
		public void set(Context context, String key, String value, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, NodeStub.vdlIfacePathOpt);
			}
			this.config.set(context, key, value, veyronOpts);
		}
	}
}
