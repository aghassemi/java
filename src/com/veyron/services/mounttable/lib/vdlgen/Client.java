// This file was auto-generated by the veyron vdl tool.
// Source(s):  collection_test.vdl
package com.veyron.services.mounttable.lib.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.OptionDefs;
import com.veyron2.Options;
import com.veyron2.RuntimeFactory;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import java.util.ArrayList;

public class Client { 
	/* Bind methods for interfaces in file: collection_test.vdl. */
	public static Collection bindCollection(String name) throws VeyronException {
		return bindCollection(name, null);
	}
	public static Collection bindCollection(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new CollectionStub(client, name);
	}

	/* Client stubs for interfaces in file: collection_test.vdl. */
	private static class CollectionStub implements Collection {
		private static final String vdlIfacePathOpt = "com.veyron.services.mounttable.lib.vdlgen.Collection";
		private final com.veyron2.ipc.Client client;
		private final String name;

		CollectionStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Collection.
		@Override
		public void export(Context context, String Val, boolean Overwrite) throws VeyronException {
			export(context, Val, Overwrite, null);
		}
		@Override
		public void export(Context context, String Val, boolean Overwrite, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Val, new Boolean(Overwrite) };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CollectionStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Export", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public ArrayList<Byte> lookup(Context context) throws VeyronException {
			return lookup(context, null);
		}
		@Override
		public ArrayList<Byte> lookup(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CollectionStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Lookup", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<ArrayList<Byte>>() {} };
			return (ArrayList<Byte>)call.finish(resultTypes)[0];

		}
	}
}
