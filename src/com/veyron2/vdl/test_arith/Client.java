// This file was auto-generated by the veyron vdl tool.
// Source(s):  arith.vdl advanced.vdl
package com.veyron2.vdl.test_arith;

import com.google.common.reflect.TypeToken;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import com.veyron2.runtime.RuntimeFactory;
import com.veyron2.vdl.ClientStream;
import com.veyron2.vdl.test_arith.exp.Exp;
import com.veyron2.vdl.test_base.Args;
import com.veyron2.vdl.test_base.NestedArgs;

public class Client { 
	/* Bind methods for interfaces in file: arith.vdl. */
	@SuppressWarnings("unused")
	public static Arith bindArith(String name, com.veyron2.ipc.Client.BindOption... opts) {
		// TODO(spetrovic): check bind options.
		final com.veyron2.ipc.Client client = RuntimeFactory.getRuntime().getClient();
		return new ArithStub(client, name);
	}
	@SuppressWarnings("unused")
	public static Calculator bindCalculator(String name, com.veyron2.ipc.Client.BindOption... opts) {
		// TODO(spetrovic): check bind options.
		final Arith arith = Client.bindArith(name, opts);
		final AdvancedMath advancedMath = Client.bindAdvancedMath(name, opts);
		final com.veyron2.ipc.Client client = RuntimeFactory.getRuntime().getClient();
		return new CalculatorStub(client, name, arith, advancedMath);
	}
	/* Bind methods for interfaces in file: advanced.vdl. */
	@SuppressWarnings("unused")
	public static Trigonometry bindTrigonometry(String name, com.veyron2.ipc.Client.BindOption... opts) {
		// TODO(spetrovic): check bind options.
		final com.veyron2.ipc.Client client = RuntimeFactory.getRuntime().getClient();
		return new TrigonometryStub(client, name);
	}
	@SuppressWarnings("unused")
	public static AdvancedMath bindAdvancedMath(String name, com.veyron2.ipc.Client.BindOption... opts) {
		// TODO(spetrovic): check bind options.
		final Trigonometry trigonometry = Client.bindTrigonometry(name, opts);
		final Exp exp = com.veyron2.vdl.test_arith.exp.Client.bindExp(name, opts);
		final com.veyron2.ipc.Client client = RuntimeFactory.getRuntime().getClient();
		return new AdvancedMathStub(client, name, trigonometry, exp);
	}
	
	/* Client stubs for interfaces in file: arith.vdl. */
	private static class ArithStub implements Arith {
		private final com.veyron2.ipc.Client client;
		private final String name;

		ArithStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Arith.
		@Override
		public int add(Context context, int a, int b, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ a, b };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Add", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {} };
			return (int)call.finish(resultTypes)[0];

		}
		@Override
		public Arith.DivModOut divMod(Context context, int a, int b, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ a, b };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "DivMod", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {}, new TypeToken<Integer>() {} };
			final Object[] results = call.finish(resultTypes);
			// Pack the results.
			final Arith.DivModOut ret = new Arith.DivModOut();
			int resultIdx = 0;
			ret.quot = (Integer)results[resultIdx++];
			ret.rem = (Integer)results[resultIdx++];
			return ret;

		}
		@Override
		public int sub(Context context, Args args, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ args };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Sub", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {} };
			return (int)call.finish(resultTypes)[0];

		}
		@Override
		public int mul(Context context, NestedArgs nested, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ nested };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Mul", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {} };
			return (int)call.finish(resultTypes)[0];

		}
		@Override
		public void genError(Context context, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GenError", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public ClientStream<Void,Integer,Void> count(Context context, int Start, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Start };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Count", inArgs, opts);
			
			return new ClientStream<Void, Integer, Void>() {
				@Override
				public void send(Void item) throws VeyronException {
					call.send(item);
				}
				@Override
				public Integer recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Integer>() {};
					final Object result = call.recv(type);
					try {
						return (Integer)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public Void finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

				}
			};
		}
		@Override
		public ClientStream<Integer,Integer,Integer> streamingAdd(Context context, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "StreamingAdd", inArgs, opts);
			
			return new ClientStream<Integer, Integer, Integer>() {
				@Override
				public void send(Integer item) throws VeyronException {
					call.send(item);
				}
				@Override
				public Integer recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Integer>() {};
					final Object result = call.recv(type);
					try {
						return (Integer)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public Integer finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {} };
					return (Integer)call.finish(resultTypes)[0];

				}
			};
		}
		@Override
		public Object quoteAny(Context context, Object a, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ a };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "QuoteAny", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Object>() {} };
			return (Object)call.finish(resultTypes)[0];

		}
	}
	private static class CalculatorStub implements Calculator {
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final Arith arith;
		private final AdvancedMath advancedMath;

		CalculatorStub(com.veyron2.ipc.Client client, String name, Arith arith, AdvancedMath advancedMath) {
			this.client = client;
			this.name = name;
			this.arith = arith;
			this.advancedMath = advancedMath;
		}
		// Methods from interface Calculator.
		@Override
		public void on(Context context, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "On", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public void off(Context context, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Off", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		// Methods from sub-interface Arith.
		@Override
		public int add(Context context, int a, int b, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.arith.add(context, a, b, opts);
		}
		@Override
		public Arith.DivModOut divMod(Context context, int a, int b, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.arith.divMod(context, a, b, opts);
		}
		@Override
		public int sub(Context context, Args args, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.arith.sub(context, args, opts);
		}
		@Override
		public int mul(Context context, NestedArgs nested, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.arith.mul(context, nested, opts);
		}
		@Override
		public void genError(Context context, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			this.arith.genError(context, opts);
		}
		@Override
		public ClientStream<Void,Integer,Void> count(Context context, int Start, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.arith.count(context, Start, opts);
		}
		@Override
		public ClientStream<Integer,Integer,Integer> streamingAdd(Context context, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.arith.streamingAdd(context, opts);
		}
		@Override
		public Object quoteAny(Context context, Object a, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.arith.quoteAny(context, a, opts);
		}
		// Methods from sub-interface AdvancedMath.
		@Override
		public double sine(Context context, double angle, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.advancedMath.sine(context, angle, opts);
		}
		@Override
		public double cosine(Context context, double angle, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.advancedMath.cosine(context, angle, opts);
		}
		@Override
		public double exp(Context context, double x, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.advancedMath.exp(context, x, opts);
		}
	}
	/* Client stubs for interfaces in file: advanced.vdl. */
	private static class TrigonometryStub implements Trigonometry {
		private final com.veyron2.ipc.Client client;
		private final String name;

		TrigonometryStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Trigonometry.
		@Override
		public double sine(Context context, double angle, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ angle };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Sine", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Double>() {} };
			return (double)call.finish(resultTypes)[0];

		}
		@Override
		public double cosine(Context context, double angle, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ angle };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Cosine", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Double>() {} };
			return (double)call.finish(resultTypes)[0];

		}
	}
	private static class AdvancedMathStub implements AdvancedMath {
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final Trigonometry trigonometry;
		private final Exp exp;

		AdvancedMathStub(com.veyron2.ipc.Client client, String name, Trigonometry trigonometry, Exp exp) {
			this.client = client;
			this.name = name;
			this.trigonometry = trigonometry;
			this.exp = exp;
		}
		// Methods from sub-interface Trigonometry.
		@Override
		public double sine(Context context, double angle, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.trigonometry.sine(context, angle, opts);
		}
		@Override
		public double cosine(Context context, double angle, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.trigonometry.cosine(context, angle, opts);
		}
		// Methods from sub-interface Exp.
		@Override
		public double exp(Context context, double x, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.exp.exp(context, x, opts);
		}
	}
}
