// This file was auto-generated by the veyron vdl tool.
// Source(s):  advanced.vdl arith.vdl
package com.veyron2.vdl.test_arith.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.OptionDefs;
import com.veyron2.Options;
import com.veyron2.RuntimeFactory;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.ClientStream;
import com.veyron2.vdl.test_arith.exp.vdlgen.Exp;
import com.veyron2.vdl.test_base.vdlgen.Args;
import com.veyron2.vdl.test_base.vdlgen.NestedArgs;

public class Client { 
	/* Bind methods for interfaces in file: advanced.vdl. */
	public static Trigonometry bindTrigonometry(String name) throws VeyronException {
		return bindTrigonometry(name, null);
	}
	public static Trigonometry bindTrigonometry(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new TrigonometryStub(client, name);
	}
	public static AdvancedMath bindAdvancedMath(String name) throws VeyronException {
		return bindAdvancedMath(name, null);
	}
	public static AdvancedMath bindAdvancedMath(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		final Trigonometry trigonometry = Client.bindTrigonometry(name, veyronOpts);
		final Exp exp = com.veyron2.vdl.test_arith.exp.vdlgen.Client.bindExp(name, veyronOpts);
		return new AdvancedMathStub(client, name, trigonometry, exp);
	}
	/* Bind methods for interfaces in file: arith.vdl. */
	public static Arith bindArith(String name) throws VeyronException {
		return bindArith(name, null);
	}
	public static Arith bindArith(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new ArithStub(client, name);
	}
	public static Calculator bindCalculator(String name) throws VeyronException {
		return bindCalculator(name, null);
	}
	public static Calculator bindCalculator(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		final Arith arith = Client.bindArith(name, veyronOpts);
		final AdvancedMath advancedMath = Client.bindAdvancedMath(name, veyronOpts);
		return new CalculatorStub(client, name, arith, advancedMath);
	}

	/* Client stubs for interfaces in file: advanced.vdl. */
	private static class TrigonometryStub implements Trigonometry {
		private static final String vdlIfacePathOpt = "com.veyron2.vdl.test_arith.vdlgen.Trigonometry";
		private final com.veyron2.ipc.Client client;
		private final String name;

		TrigonometryStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Trigonometry.
		@Override
		public double sine(Context context, double angle) throws VeyronException {
			return sine(context, angle, null);
		}
		@Override
		public double sine(Context context, double angle, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ new Double(angle) };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, TrigonometryStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Sine", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Double>() {} };
			return (double)call.finish(resultTypes)[0];

		}
		@Override
		public double cosine(Context context, double angle) throws VeyronException {
			return cosine(context, angle, null);
		}
		@Override
		public double cosine(Context context, double angle, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ new Double(angle) };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, TrigonometryStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Cosine", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Double>() {} };
			return (double)call.finish(resultTypes)[0];

		}
	}
	private static class AdvancedMathStub implements AdvancedMath {
		private static final String vdlIfacePathOpt = "com.veyron2.vdl.test_arith.vdlgen.AdvancedMath";
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final Trigonometry trigonometry;
		private final Exp exp;

		AdvancedMathStub(com.veyron2.ipc.Client client, String name, Trigonometry trigonometry, Exp exp) {
			this.client = client;
			this.name = name;
			this.trigonometry = trigonometry;
			this.exp = exp;
		}
		// Methods from sub-interface Trigonometry.
		@Override
		public double sine(Context context, double angle) throws VeyronException {
			return sine(context, angle, null);
		}
		@Override
		public double sine(Context context, double angle, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, AdvancedMathStub.vdlIfacePathOpt);
			}
			return this.trigonometry.sine(context, angle, veyronOpts);
		}
		@Override
		public double cosine(Context context, double angle) throws VeyronException {
			return cosine(context, angle, null);
		}
		@Override
		public double cosine(Context context, double angle, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, AdvancedMathStub.vdlIfacePathOpt);
			}
			return this.trigonometry.cosine(context, angle, veyronOpts);
		}
		// Methods from sub-interface Exp.
		@Override
		public double exp(Context context, double x) throws VeyronException {
			return exp(context, x, null);
		}
		@Override
		public double exp(Context context, double x, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, AdvancedMathStub.vdlIfacePathOpt);
			}
			return this.exp.exp(context, x, veyronOpts);
		}
	}
	/* Client stubs for interfaces in file: arith.vdl. */
	private static class ArithStub implements Arith {
		private static final String vdlIfacePathOpt = "com.veyron2.vdl.test_arith.vdlgen.Arith";
		private final com.veyron2.ipc.Client client;
		private final String name;

		ArithStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Arith.
		@Override
		public int add(Context context, int a, int b) throws VeyronException {
			return add(context, a, b, null);
		}
		@Override
		public int add(Context context, int a, int b, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ new Integer(a), new Integer(b) };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ArithStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Add", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {} };
			return (int)call.finish(resultTypes)[0];

		}
		@Override
		public Arith.DivModOut divMod(Context context, int a, int b) throws VeyronException {
			return divMod(context, a, b, null);
		}
		@Override
		public Arith.DivModOut divMod(Context context, int a, int b, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ new Integer(a), new Integer(b) };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ArithStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "DivMod", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {}, new TypeToken<Integer>() {} };
			final Object[] results = call.finish(resultTypes);
			// Pack the results.
			final Arith.DivModOut ret = new Arith.DivModOut();
			int resultIdx = 0;
			ret.quot = (Integer)results[resultIdx++];
			ret.rem = (Integer)results[resultIdx++];
			return ret;

		}
		@Override
		public int sub(Context context, Args args) throws VeyronException {
			return sub(context, args, null);
		}
		@Override
		public int sub(Context context, Args args, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ args };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ArithStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Sub", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {} };
			return (int)call.finish(resultTypes)[0];

		}
		@Override
		public int mul(Context context, NestedArgs nested) throws VeyronException {
			return mul(context, nested, null);
		}
		@Override
		public int mul(Context context, NestedArgs nested, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ nested };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ArithStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Mul", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {} };
			return (int)call.finish(resultTypes)[0];

		}
		@Override
		public void genError(Context context) throws VeyronException {
			genError(context, null);
		}
		@Override
		public void genError(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ArithStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GenError", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public ClientStream<Void,Integer,Void> count(Context context, int Start) throws VeyronException {
			return count(context, Start, null);
		}
		@Override
		public ClientStream<Void,Integer,Void> count(Context context, int Start, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ new Integer(Start) };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ArithStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Count", inArgs, veyronOpts);

			return new ClientStream<Void, Integer, Void>() {
				@Override
				public void send(Void item) throws VeyronException {
					call.send(item);
				}
				@Override
				public Integer recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Integer>() {};
					final Object result = call.recv(type);
					try {
						return (Integer)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public Void finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

				}
			};
		}
		@Override
		public ClientStream<Integer,Integer,Integer> streamingAdd(Context context) throws VeyronException {
			return streamingAdd(context, null);
		}
		@Override
		public ClientStream<Integer,Integer,Integer> streamingAdd(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ArithStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "StreamingAdd", inArgs, veyronOpts);

			return new ClientStream<Integer, Integer, Integer>() {
				@Override
				public void send(Integer item) throws VeyronException {
					call.send(item);
				}
				@Override
				public Integer recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Integer>() {};
					final Object result = call.recv(type);
					try {
						return (Integer)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public Integer finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Integer>() {} };
					return (Integer)call.finish(resultTypes)[0];

				}
			};
		}
		@Override
		public Object quoteAny(Context context, Object a) throws VeyronException {
			return quoteAny(context, a, null);
		}
		@Override
		public Object quoteAny(Context context, Object a, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ a };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ArithStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "QuoteAny", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<Object>() {} };
			return (Object)call.finish(resultTypes)[0];

		}
	}
	private static class CalculatorStub implements Calculator {
		private static final String vdlIfacePathOpt = "com.veyron2.vdl.test_arith.vdlgen.Calculator";
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final Arith arith;
		private final AdvancedMath advancedMath;

		CalculatorStub(com.veyron2.ipc.Client client, String name, Arith arith, AdvancedMath advancedMath) {
			this.client = client;
			this.name = name;
			this.arith = arith;
			this.advancedMath = advancedMath;
		}
		// Methods from interface Calculator.
		@Override
		public void on(Context context) throws VeyronException {
			on(context, null);
		}
		@Override
		public void on(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "On", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public void off(Context context) throws VeyronException {
			off(context, null);
		}
		@Override
		public void off(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Off", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		// Methods from sub-interface Arith.
		@Override
		public int add(Context context, int a, int b) throws VeyronException {
			return add(context, a, b, null);
		}
		@Override
		public int add(Context context, int a, int b, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.arith.add(context, a, b, veyronOpts);
		}
		@Override
		public Arith.DivModOut divMod(Context context, int a, int b) throws VeyronException {
			return divMod(context, a, b, null);
		}
		@Override
		public Arith.DivModOut divMod(Context context, int a, int b, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.arith.divMod(context, a, b, veyronOpts);
		}
		@Override
		public int sub(Context context, Args args) throws VeyronException {
			return sub(context, args, null);
		}
		@Override
		public int sub(Context context, Args args, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.arith.sub(context, args, veyronOpts);
		}
		@Override
		public int mul(Context context, NestedArgs nested) throws VeyronException {
			return mul(context, nested, null);
		}
		@Override
		public int mul(Context context, NestedArgs nested, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.arith.mul(context, nested, veyronOpts);
		}
		@Override
		public void genError(Context context) throws VeyronException {
			genError(context, null);
		}
		@Override
		public void genError(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			this.arith.genError(context, veyronOpts);
		}
		@Override
		public ClientStream<Void,Integer,Void> count(Context context, int Start) throws VeyronException {
			return count(context, Start, null);
		}
		@Override
		public ClientStream<Void,Integer,Void> count(Context context, int Start, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.arith.count(context, Start, veyronOpts);
		}
		@Override
		public ClientStream<Integer,Integer,Integer> streamingAdd(Context context) throws VeyronException {
			return streamingAdd(context, null);
		}
		@Override
		public ClientStream<Integer,Integer,Integer> streamingAdd(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.arith.streamingAdd(context, veyronOpts);
		}
		@Override
		public Object quoteAny(Context context, Object a) throws VeyronException {
			return quoteAny(context, a, null);
		}
		@Override
		public Object quoteAny(Context context, Object a, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.arith.quoteAny(context, a, veyronOpts);
		}
		// Methods from sub-interface AdvancedMath.
		@Override
		public double sine(Context context, double angle) throws VeyronException {
			return sine(context, angle, null);
		}
		@Override
		public double sine(Context context, double angle, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.advancedMath.sine(context, angle, veyronOpts);
		}
		@Override
		public double cosine(Context context, double angle) throws VeyronException {
			return cosine(context, angle, null);
		}
		@Override
		public double cosine(Context context, double angle, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.advancedMath.cosine(context, angle, veyronOpts);
		}
		@Override
		public double exp(Context context, double x) throws VeyronException {
			return exp(context, x, null);
		}
		@Override
		public double exp(Context context, double x, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, CalculatorStub.vdlIfacePathOpt);
			}
			return this.advancedMath.exp(context, x, veyronOpts);
		}
	}
}
