// This file was auto-generated by the veyron vdl tool.
// Source: base.vdl

package com.veyron2.vdl.test_base;

import com.veyron2.vdl.FixedLengthList;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

/**
 * type NamedArray [2]bool 
 * NamedEnum       enum{A;B;C}
 **/
public final class NamedArray implements List<java.lang.Boolean> {
    private final static int length = 2;
    private FixedLengthList<java.lang.Boolean> impl;

    public NamedArray(java.lang.Boolean[] impl) {
        setValue(impl);
    }

    public java.lang.Boolean[] getValue() {
        return impl.getBackingArray();
    }

    public void setValue(java.lang.Boolean[] arr) {
        if (arr.length != length) {
            throw new IllegalArgumentException("Invalid length " + length + " expected "
                    + arr.length);
        }
        this.impl = new FixedLengthList<java.lang.Boolean>(arr);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (this.getClass() != obj.getClass())
            return false;
        final NamedArray other = (NamedArray) obj;
        if (!(this.impl.equals(other.impl)))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        return (impl == null) ? 0 : impl.hashCode();
    }

    @Override
    public void add(int location, java.lang.Boolean object) {
        impl.add(location, object);
    }

    @Override
    public boolean add(java.lang.Boolean object) {
        return impl.add(object);
    }

    @Override
    public boolean addAll(int location, Collection<? extends java.lang.Boolean> collection) {
        return impl.addAll(location, collection);
    }

    @Override
    public boolean addAll(Collection<? extends java.lang.Boolean> collection) {
        return impl.addAll(collection);
    }

    @Override
    public void clear() {
        impl.clear();
    }

    @Override
    public boolean contains(Object object) {
        return impl.contains(object);
    }

    @Override
    public boolean containsAll(Collection<?> collection) {
        return impl.containsAll(collection);
    }

    @Override
    public java.lang.Boolean get(int location) {
        return impl.get(location);
    }

    @Override
    public int indexOf(Object object) {
        return impl.indexOf(object);
    }

    @Override
    public boolean isEmpty() {
        return impl.isEmpty();
    }

    @Override
    public Iterator<java.lang.Boolean> iterator() {
        return impl.iterator();
    }

    @Override
    public int lastIndexOf(Object object) {
        return impl.lastIndexOf(object);
    }

    @Override
    public ListIterator<java.lang.Boolean> listIterator() {
        return impl.listIterator();
    }

    @Override
    public ListIterator<java.lang.Boolean> listIterator(int location) {
        return impl.listIterator(location);
    }

    @Override
    public java.lang.Boolean remove(int location) {
        return impl.remove(location);
    }

    @Override
    public boolean remove(Object object) {
        return impl.remove(object);
    }

    @Override
    public boolean removeAll(Collection<?> collection) {
        return impl.removeAll(collection);
    }

    @Override
    public boolean retainAll(Collection<?> collection) {
        return impl.retainAll(collection);
    }

    @Override
    public java.lang.Boolean set(int location, java.lang.Boolean object) {
        return impl.set(location, object);
    }

    @Override
    public int size() {
        return impl.size();
    }

    @Override
    public List<java.lang.Boolean> subList(int start, int end) {
        return impl.subList(start, end);
    }

    @Override
    public Object[] toArray() {
        return impl.toArray();
    }

    @Override
    public <T> T[] toArray(T[] array) {
        return impl.toArray(array);
    }
}
