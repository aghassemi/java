// This file was auto-generated by the veyron vdl tool.
// Source(s):  base.vdl
package com.veyron2.vdl.test_base.gen_impl;

import com.veyron2.vdl.test_base.Args;
import com.veyron2.vdl.test_base.CompComp;
import com.veyron2.vdl.test_base.Composites;
import com.veyron2.vdl.test_base.NamedStruct;
import com.veyron2.vdl.test_base.NestedArgs;
import com.veyron2.vdl.test_base.Scalars;
import com.veyron2.vdl.test_base.ServiceA;
import com.veyron2.vdl.test_base.ServiceAFactory;
import com.veyron2.vdl.test_base.ServiceAService;
import com.veyron2.vdl.test_base.ServiceB;
import com.veyron2.vdl.test_base.ServiceBFactory;
import com.veyron2.vdl.test_base.ServiceBService;
import com.veyron2.vdl.test_base.VeyronConsts;

/* Client stub for interface: ServiceA. */
public final class ServiceAStub implements ServiceA {
	private static final java.lang.String vdlIfacePathOpt = "com.veyron2.vdl.test_base.gen_impl.ServiceA";
	private final com.veyron2.ipc.Client client;
	private final java.lang.String name;

	public ServiceAStub(com.veyron2.ipc.Client client, java.lang.String name) {
		this.client = client;
		this.name = name;
	}
	// Methods from interface ServiceA.
	@Override
	public void methodA1(com.veyron2.ipc.Context context) throws com.veyron2.ipc.VeyronException {
		methodA1(context, null);
	}
	@Override
	public void methodA1(com.veyron2.ipc.Context context, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{  };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ServiceAStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodA1", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
			call.finish(resultTypes);

	}
	@Override
	public java.lang.String methodA2(com.veyron2.ipc.Context context, int a, java.lang.String b) throws com.veyron2.ipc.VeyronException {
		return methodA2(context, a, b, null);
	}
	@Override
	public java.lang.String methodA2(com.veyron2.ipc.Context context, int a, java.lang.String b, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Integer(a), b };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ServiceAStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodA2", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.String>() {} };
			return (java.lang.String)call.finish(resultTypes)[0];

	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,Scalars,java.lang.String> methodA3(com.veyron2.ipc.Context context, int a) throws com.veyron2.ipc.VeyronException {
		return methodA3(context, a, null);
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,Scalars,java.lang.String> methodA3(com.veyron2.ipc.Context context, int a, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Integer(a) };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ServiceAStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodA3", inArgs, veyronOpts);

		return new com.veyron2.vdl.ClientStream<java.lang.Void, Scalars, java.lang.String>() {
			@Override
			public void send(java.lang.Void item) throws com.veyron2.ipc.VeyronException {
				call.send(item);
			}
			@Override
			public Scalars recv() throws java.io.EOFException, com.veyron2.ipc.VeyronException {
				final com.google.common.reflect.TypeToken<?> type = new com.google.common.reflect.TypeToken<Scalars>() {};
				final java.lang.Object result = call.recv(type);
				try {
					return (Scalars)result;
				} catch (java.lang.ClassCastException e) {
					throw new com.veyron2.ipc.VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
			@Override
			public java.lang.String finish() throws com.veyron2.ipc.VeyronException {
				// Prepare output argument and finish the call.
					final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.String>() {} };
					return (java.lang.String)call.finish(resultTypes)[0];

			}
		};
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Integer,java.lang.String,java.lang.Void> methodA4(com.veyron2.ipc.Context context, int a) throws com.veyron2.ipc.VeyronException {
		return methodA4(context, a, null);
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Integer,java.lang.String,java.lang.Void> methodA4(com.veyron2.ipc.Context context, int a, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Integer(a) };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ServiceAStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodA4", inArgs, veyronOpts);

		return new com.veyron2.vdl.ClientStream<java.lang.Integer, java.lang.String, java.lang.Void>() {
			@Override
			public void send(java.lang.Integer item) throws com.veyron2.ipc.VeyronException {
				call.send(item);
			}
			@Override
			public java.lang.String recv() throws java.io.EOFException, com.veyron2.ipc.VeyronException {
				final com.google.common.reflect.TypeToken<?> type = new com.google.common.reflect.TypeToken<java.lang.String>() {};
				final java.lang.Object result = call.recv(type);
				try {
					return (java.lang.String)result;
				} catch (java.lang.ClassCastException e) {
					throw new com.veyron2.ipc.VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
			@Override
			public java.lang.Void finish() throws com.veyron2.ipc.VeyronException {
				// Prepare output argument and finish the call.
					final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

			}
		};
	}
}
