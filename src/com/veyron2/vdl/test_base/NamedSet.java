// This file was auto-generated by the veyron vdl tool.
// Source: base.vdl

package com.veyron2.vdl.test_base;

import java.util.Collection;
import java.util.Iterator;
import java.util.Set;

/**
 * NamedSet set[string] 
 **/
public final class NamedSet implements Set<java.lang.String> {
    private Set<java.lang.String> impl;

    public NamedSet(Set<java.lang.String> impl) {
        this.impl = impl;
    }

    public Set<java.lang.String> getValue() {
        return this.impl;
    }

    public void setValue(Set<java.lang.String> newImpl) {
        this.impl = newImpl;
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (this.getClass() != obj.getClass())
            return false;
        final NamedSet other = (NamedSet) obj;
        if (!(this.impl.equals(other.impl)))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        return (impl == null) ? 0 : impl.hashCode();
    }

    @Override
    public void clear() {
        impl.clear();
    }

    @Override
    public boolean add(java.lang.String object) {
        return impl.add(object);
    }

    @Override
    public boolean addAll(Collection<? extends java.lang.String> collection) {
        return impl.addAll(collection);
    }

    @Override
    public boolean contains(Object object) {
        return impl.contains(object);
    }

    @Override
    public boolean containsAll(Collection<?> collection) {
        return impl.containsAll(collection);
    }

    @Override
    public boolean isEmpty() {
        return impl.isEmpty();
    }

    @Override
    public Iterator<java.lang.String> iterator() {
        return impl.iterator();
    }

    @Override
    public boolean remove(Object object) {
        return impl.remove(object);
    }

    @Override
    public boolean removeAll(Collection<?> collection) {
        return impl.removeAll(collection);
    }

    @Override
    public boolean retainAll(Collection<?> collection) {
        return impl.retainAll(collection);
    }

    @Override
    public int size() {
        return impl.size();
    }

    @Override
    public Object[] toArray() {
        return impl.toArray();
    }

    @Override
    public <T> T[] toArray(T[] array) {
        return impl.toArray(array);
    }

}
