// This file was auto-generated by the veyron vdl tool.
// Source(s):  base.vdl
package com.veyron2.vdl.test_base;

import com.google.common.reflect.TypeToken;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import com.veyron2.runtime.RuntimeFactory;
import com.veyron2.vdl.ClientStream;

public class Client { 
	/* Bind methods for interfaces in file: base.vdl. */
	@SuppressWarnings("unused")
	public static ServiceA bindServiceA(String name, com.veyron2.ipc.Client.BindOption... opts) {
		// TODO(spetrovic): check bind options.
		final com.veyron2.ipc.Client client = RuntimeFactory.getRuntime().getClient();
		return new ServiceAStub(client, name);
	}
	@SuppressWarnings("unused")
	public static ServiceB bindServiceB(String name, com.veyron2.ipc.Client.BindOption... opts) {
		// TODO(spetrovic): check bind options.
		final ServiceA serviceA = Client.bindServiceA(name, opts);
		final com.veyron2.ipc.Client client = RuntimeFactory.getRuntime().getClient();
		return new ServiceBStub(client, name, serviceA);
	}
	
	/* Client stubs for interfaces in file: base.vdl. */
	private static class ServiceAStub implements ServiceA {
		private final com.veyron2.ipc.Client client;
		private final String name;

		ServiceAStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface ServiceA.
		@Override
		public void methodA1(Context context, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodA1", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public String methodA2(Context context, int a, String b, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ a, b };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodA2", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<String>() {} };
			return (String)call.finish(resultTypes)[0];

		}
		@Override
		public ClientStream<Void,Scalars,String> methodA3(Context context, int a, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ a };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodA3", inArgs, opts);
			
			return new ClientStream<Void, Scalars, String>() {
				@Override
				public void send(Void item) throws VeyronException {
					call.send(item);
				}
				@Override
				public Scalars recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Scalars>() {};
					final Object result = call.recv(type);
					try {
						return (Scalars)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public String finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<String>() {} };
					return (String)call.finish(resultTypes)[0];

				}
			};
		}
		@Override
		public ClientStream<Integer,String,Void> methodA4(Context context, int a, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ a };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodA4", inArgs, opts);
			
			return new ClientStream<Integer, String, Void>() {
				@Override
				public void send(Integer item) throws VeyronException {
					call.send(item);
				}
				@Override
				public String recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<String>() {};
					final Object result = call.recv(type);
					try {
						return (String)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public Void finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

				}
			};
		}
	}
	private static class ServiceBStub implements ServiceB {
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final ServiceA serviceA;

		ServiceBStub(com.veyron2.ipc.Client client, String name, ServiceA serviceA) {
			this.client = client;
			this.name = name;
			this.serviceA = serviceA;
		}
		// Methods from interface ServiceB.
		@Override
		public CompComp methodB1(Context context, Scalars a, Composites b, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ a, b };

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "MethodB1", inArgs, opts);
			
			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<CompComp>() {} };
			return (CompComp)call.finish(resultTypes)[0];

		}
		// Methods from sub-interface ServiceA.
		@Override
		public void methodA1(Context context, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			this.serviceA.methodA1(context, opts);
		}
		@Override
		public String methodA2(Context context, int a, String b, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.serviceA.methodA2(context, a, b, opts);
		}
		@Override
		public ClientStream<Void,Scalars,String> methodA3(Context context, int a, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.serviceA.methodA3(context, a, opts);
		}
		@Override
		public ClientStream<Integer,String,Void> methodA4(Context context, int a, com.veyron2.ipc.Client.CallOption... opts) throws VeyronException {
			return this.serviceA.methodA4(context, a, opts);
		}
	}
}
