// This file was auto-generated by the veyron vdl tool.
// Source(s):  base.vdl
package com.veyron2.vdl.test_base;

import com.google.common.reflect.TypeToken;
import com.veyron2.ipc.ServerCall;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.Stream;

public class Server { 
	/* Server stub creation methods for interfaces in file: base.vdl. */
	public static Object newServiceA(ServiceAService service) { 
		return new ServiceAStub(service);
	}
	public static Object newServiceB(ServiceBService service) { 
		final Server.ServiceAStub serviceAService = (Server.ServiceAStub)Server.newServiceA(service);
		return new ServiceBStub(service, serviceAService);
	}
	
	/* Server stubs for interfaces in file: base.vdl. */
	public static class ServiceAStub {
		private final ServiceAService service;

		ServiceAStub(ServiceAService service) {
			this.service = service;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			if (method == "MethodA1") {
				return new Object[]{  };
			}
			if (method == "MethodA2") {
				return new Object[]{  };
			}
			if (method == "MethodA3") {
				return new Object[]{ "tag", 6 };
			}
			if (method == "MethodA4") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface ServiceA.
		public void methodA1(ServerCall call) throws VeyronException { 
			this.service.methodA1(call);
		}
		public String methodA2(ServerCall call, int a, String b) throws VeyronException { 
			return this.service.methodA2(call, a, b);
		}
		public String methodA3(ServerCall call, int a) throws VeyronException { 
			final ServerCall serverCall = call;
			final Stream<Scalars,Void> stream = new Stream<Scalars,Void>() {
				@Override
				public void send(Scalars item) throws VeyronException {
					serverCall.send(item);
				}
				@Override
				public Void recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Void>() {};
					final Object result = serverCall.recv(type);
					try {
						return (Void)result;
					} catch (java.lang.ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
			};
			return this.service.methodA3(call, a, stream);
		}
		public void methodA4(ServerCall call, int a) throws VeyronException { 
			final ServerCall serverCall = call;
			final Stream<String,Integer> stream = new Stream<String,Integer>() {
				@Override
				public void send(String item) throws VeyronException {
					serverCall.send(item);
				}
				@Override
				public Integer recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Integer>() {};
					final Object result = serverCall.recv(type);
					try {
						return (Integer)result;
					} catch (java.lang.ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
			};
			this.service.methodA4(call, a, stream);
		}
	}
	public static class ServiceBStub {
		private final ServiceBService service;
		private final Server.ServiceAStub serviceAService;

		ServiceBStub(ServiceBService service, Server.ServiceAStub serviceAService) {
			this.service = service;
			this.serviceAService = serviceAService;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			{
				final Object[] tags = this.serviceAService.getMethodTags(call, method);
				if (tags != null) return tags;
			}
			if (method == "MethodB1") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface ServiceB.
		public CompComp methodB1(ServerCall call, Scalars a, Composites b) throws VeyronException { 
			return this.service.methodB1(call, a, b);
		}
		// Methods from sub-interface ServiceA.
		public void methodA1(ServerCall call) throws VeyronException {
			this.serviceAService.methodA1(call);
		}
		public String methodA2(ServerCall call, int a, String b) throws VeyronException {
			return this.serviceAService.methodA2(call, a, b);
		}
		public String methodA3(ServerCall call, int a) throws VeyronException {
			return this.serviceAService.methodA3(call, a);
		}
		public void methodA4(ServerCall call, int a) throws VeyronException {
			this.serviceAService.methodA4(call, a);
		}
	}
}
