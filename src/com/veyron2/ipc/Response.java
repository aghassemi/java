
// This file was auto-generated by the veyron vdl tool.
// Source: protocol.vdl
package com.veyron2.ipc;


/**
 * Response describes the response header sent by the server to the client.  A
 * zero response header is sent before each streaming arg.  Thereafter a
 * non-zero response header is sent at the end of the RPC call, right before
 * the positional results.
**/
public final class Response { 
	// Error in processing the RPC at the server. Implies EndStreamResults.
	private VeyronException error;
	// EndStreamResults is true iff no more streaming results will be sent; the
// remainder of the stream consists of NumPosResults positional results.
	private boolean endStreamResults;
	// NumPosResults is the number of positional results, which immediately follow
// on the response stream.  After these results, no further data will be sent
// on the response stream.
	private long numPosResults;

	public Response(VeyronException error, boolean endStreamResults, long numPosResults) { 
		this.error = error;
		this.endStreamResults = endStreamResults;
		this.numPosResults = numPosResults;
	}
	public VeyronException getError() { return this.error; }
	public boolean getEndStreamResults() { return this.endStreamResults; }
	public long getNumPosResults() { return this.numPosResults; }

	public void setError(VeyronException error) { this.error = error; }
	public void setEndStreamResults(boolean endStreamResults) { this.endStreamResults = endStreamResults; }
	public void setNumPosResults(long numPosResults) { this.numPosResults = numPosResults; }

	@Override
	public boolean equals(java.lang.Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (this.getClass() != obj.getClass()) return false;
		final Response other = (Response)obj;
		if (!(this.error.equals(other.error))) return false;
		if (this.endStreamResults != other.endStreamResults) return false;
		if (this.numPosResults != other.numPosResults) return false;
		return true;
	}
	@Override
	public int hashCode() {
		int result = 1;
		final int prime = 31;
		result = prime * result + (error == null ? 0 : error.hashCode());
		result = prime * result + Boolean.valueOf(endStreamResults).hashCode();
		result = prime * result + Long.valueOf(numPosResults).hashCode();
		return result;
	}
}
