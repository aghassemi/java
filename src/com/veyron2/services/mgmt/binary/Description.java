
// This file was auto-generated by the veyron vdl tool.
// Source: binary.vdl
package com.veyron2.services.mgmt.binary;

import java.util.HashMap;

/**
 * Description describes a binary. Binaries are named and have been
 * determined to run on some set of profiles. The mechanism for
 * determing profiles is specifically not specified and left to the
 * implementation of the interface that generates the description.
 */
public final class Description { 
	// Name is the Object name of the application binary that can
// be used to fetch the actual binary from a content server.
	private String name;
	// Profiles is a set of names of compatible profiles.  Each
// name can either be an Object name that resolves to a
// Profile, or can be the profile's label, e.g.:
//
//   "profiles/google/cluster/diskfull"
//   "linux-media"
//
// Application developers can specify compatible profiles by
// hand, but we also want to be able to automatically derive
// the matching profiles from examining the binary itself
// (e.g. that's what Build.Describe() does).
	private HashMap<String, Boolean> profiles;

	public Description(String name, HashMap<String, Boolean> profiles) { 
		this.name = name;
		this.profiles = profiles;
	}
	public String getName() { return this.name; }
	public HashMap<String, Boolean> getProfiles() { return this.profiles; }

	public void setName(String name) { this.name = name; }
	public void setProfiles(HashMap<String, Boolean> profiles) { this.profiles = profiles; }

	@Override
	public boolean equals(java.lang.Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (this.getClass() != obj.getClass()) return false;
		final Description other = (Description)obj;
		if (!(this.name.equals(other.name))) return false;
		if (!(this.profiles.equals(other.profiles))) return false;
		return true;
	}
	@Override
	public int hashCode() {
		int result = 1;
		final int prime = 31;
		result = prime * result + (name == null ? 0 : name.hashCode());
		result = prime * result + (profiles == null ? 0 : profiles.hashCode());
		return result;
	}
}
