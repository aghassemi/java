
// This file was auto-generated by the veyron vdl tool.
// Source: service.vdl
package com.veyron2.services.store;

import com.veyron2.storage.ID;

/**
 * Conflict represents a conflicting update in the store.
**/
public final class Conflict { 
	// Ty is the IDL name of the type.
	private String ty;
	// ID is the identifier for the entry.
	private ID iD;
	// Local is the local value for the entry.
	private Entry local;
	// Remove is the conflicting update.
	private Entry remote;
	// Root is a common ancestor.
	private Entry root;

	public Conflict(String ty, ID iD, Entry local, Entry remote, Entry root) { 
		this.ty = ty;
		this.iD = iD;
		this.local = local;
		this.remote = remote;
		this.root = root;
	}
	public String getTy() { return this.ty; }
	public ID getID() { return this.iD; }
	public Entry getLocal() { return this.local; }
	public Entry getRemote() { return this.remote; }
	public Entry getRoot() { return this.root; }

	public void setTy(String ty) { this.ty = ty; }
	public void setID(ID iD) { this.iD = iD; }
	public void setLocal(Entry local) { this.local = local; }
	public void setRemote(Entry remote) { this.remote = remote; }
	public void setRoot(Entry root) { this.root = root; }

	@Override
	public boolean equals(java.lang.Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (this.getClass() != obj.getClass()) return false;
		final Conflict other = (Conflict)obj;
		if (!(this.ty.equals(other.ty))) return false;
		if (!(this.iD.equals(other.iD))) return false;
		if (!(this.local.equals(other.local))) return false;
		if (!(this.remote.equals(other.remote))) return false;
		if (!(this.root.equals(other.root))) return false;
		return true;
	}
	@Override
	public int hashCode() {
		int result = 1;
		final int prime = 31;
		result = prime * result + (ty == null ? 0 : ty.hashCode());
		result = prime * result + (iD == null ? 0 : iD.hashCode());
		result = prime * result + (local == null ? 0 : local.hashCode());
		result = prime * result + (remote == null ? 0 : remote.hashCode());
		result = prime * result + (root == null ? 0 : root.hashCode());
		return result;
	}
}
