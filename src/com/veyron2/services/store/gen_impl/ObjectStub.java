// This file was auto-generated by the veyron vdl tool.
// Source(s):  service.vdl
package com.veyron2.services.store.gen_impl;

import com.veyron2.services.store.Conflict;
import com.veyron2.services.store.Entry;
import com.veyron2.services.store.Object;
import com.veyron2.services.store.ObjectFactory;
import com.veyron2.services.store.ObjectService;
import com.veyron2.services.store.QueryResult;
import com.veyron2.services.store.Stat;
import com.veyron2.services.store.Store;
import com.veyron2.services.store.StoreFactory;
import com.veyron2.services.store.StoreService;
import com.veyron2.services.store.VeyronConsts;

/* Client stub for interface: Object. */
public final class ObjectStub implements Object {
	private static final java.lang.String vdlIfacePathOpt = "com.veyron2.services.store.gen_impl.Object";
	private final com.veyron2.ipc.Client client;
	private final java.lang.String name;
	private final com.veyron2.services.mounttable.Globable globable;
	private final com.veyron2.services.watch.GlobWatcher globWatcher;
	private final com.veyron2.services.watch.QueryWatcher queryWatcher;

	public ObjectStub(com.veyron2.ipc.Client client, java.lang.String name) {
		this.client = client;
		this.name = name;
		this.globable = new com.veyron2.services.mounttable.gen_impl.GlobableStub(client, name);
		this.globWatcher = new com.veyron2.services.watch.gen_impl.GlobWatcherStub(client, name);
		this.queryWatcher = new com.veyron2.services.watch.gen_impl.QueryWatcherStub(client, name);
	}
	// Methods from interface Object.
	@Override
	public boolean exists(com.veyron2.ipc.Context context, long TID) throws com.veyron2.ipc.VeyronException {
		return exists(context, TID, null);
	}
	@Override
	public boolean exists(com.veyron2.ipc.Context context, long TID, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(TID) };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Exists", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<java.lang.Boolean>() {} };
			return (boolean)call.finish(resultTypes)[0];

	}
	@Override
	public Entry get(com.veyron2.ipc.Context context, long TID) throws com.veyron2.ipc.VeyronException {
		return get(context, TID, null);
	}
	@Override
	public Entry get(com.veyron2.ipc.Context context, long TID, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(TID) };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Get", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<Entry>() {} };
			return (Entry)call.finish(resultTypes)[0];

	}
	@Override
	public Stat put(com.veyron2.ipc.Context context, long TID, java.lang.Object V) throws com.veyron2.ipc.VeyronException {
		return put(context, TID, V, null);
	}
	@Override
	public Stat put(com.veyron2.ipc.Context context, long TID, java.lang.Object V, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(TID), V };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Put", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<Stat>() {} };
			return (Stat)call.finish(resultTypes)[0];

	}
	@Override
	public void remove(com.veyron2.ipc.Context context, long TID) throws com.veyron2.ipc.VeyronException {
		remove(context, TID, null);
	}
	@Override
	public void remove(com.veyron2.ipc.Context context, long TID, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(TID) };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Remove", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
			call.finish(resultTypes);

	}
	@Override
	public void setAttr(com.veyron2.ipc.Context context, long TID, java.util.ArrayList<java.lang.Object> Attrs) throws com.veyron2.ipc.VeyronException {
		setAttr(context, TID, Attrs, null);
	}
	@Override
	public void setAttr(com.veyron2.ipc.Context context, long TID, java.util.ArrayList<java.lang.Object> Attrs, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(TID), Attrs };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "SetAttr", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
			call.finish(resultTypes);

	}
	@Override
	public Stat stat(com.veyron2.ipc.Context context, long TID) throws com.veyron2.ipc.VeyronException {
		return stat(context, TID, null);
	}
	@Override
	public Stat stat(com.veyron2.ipc.Context context, long TID, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(TID) };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Stat", inArgs, veyronOpts);

		// Prepare output argument and finish the call.
			final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{ new com.google.common.reflect.TypeToken<Stat>() {} };
			return (Stat)call.finish(resultTypes)[0];

	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,QueryResult,java.lang.Void> query(com.veyron2.ipc.Context context, long TID, com.veyron2.query.Query Q) throws com.veyron2.ipc.VeyronException {
		return query(context, TID, Q, null);
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,QueryResult,java.lang.Void> query(com.veyron2.ipc.Context context, long TID, com.veyron2.query.Query Q, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(TID), Q };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Query", inArgs, veyronOpts);

		return new com.veyron2.vdl.ClientStream<java.lang.Void, QueryResult, java.lang.Void>() {
			@Override
			public void send(java.lang.Void item) throws com.veyron2.ipc.VeyronException {
				call.send(item);
			}
			@Override
			public QueryResult recv() throws java.io.EOFException, com.veyron2.ipc.VeyronException {
				final com.google.common.reflect.TypeToken<?> type = new com.google.common.reflect.TypeToken<QueryResult>() {};
				final java.lang.Object result = call.recv(type);
				try {
					return (QueryResult)result;
				} catch (java.lang.ClassCastException e) {
					throw new com.veyron2.ipc.VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
			@Override
			public java.lang.Void finish() throws com.veyron2.ipc.VeyronException {
				// Prepare output argument and finish the call.
					final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

			}
		};
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,java.lang.String,java.lang.Void> globT(com.veyron2.ipc.Context context, long TID, java.lang.String pattern) throws com.veyron2.ipc.VeyronException {
		return globT(context, TID, pattern, null);
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,java.lang.String,java.lang.Void> globT(com.veyron2.ipc.Context context, long TID, java.lang.String pattern, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Prepare input arguments.
		final java.lang.Object[] inArgs = new java.lang.Object[]{ new java.lang.Long(TID), pattern };

		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		// Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}

		// Start the call.
		final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "GlobT", inArgs, veyronOpts);

		return new com.veyron2.vdl.ClientStream<java.lang.Void, java.lang.String, java.lang.Void>() {
			@Override
			public void send(java.lang.Void item) throws com.veyron2.ipc.VeyronException {
				call.send(item);
			}
			@Override
			public java.lang.String recv() throws java.io.EOFException, com.veyron2.ipc.VeyronException {
				final com.google.common.reflect.TypeToken<?> type = new com.google.common.reflect.TypeToken<java.lang.String>() {};
				final java.lang.Object result = call.recv(type);
				try {
					return (java.lang.String)result;
				} catch (java.lang.ClassCastException e) {
					throw new com.veyron2.ipc.VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
			@Override
			public java.lang.Void finish() throws com.veyron2.ipc.VeyronException {
				// Prepare output argument and finish the call.
					final com.google.common.reflect.TypeToken<?>[] resultTypes = new com.google.common.reflect.TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

			}
		};
	}
	// Methods from sub-interface Globable.
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,com.veyron2.services.mounttable.MountEntry,java.lang.Void> glob(com.veyron2.ipc.Context context, java.lang.String pattern) throws com.veyron2.ipc.VeyronException {
		return glob(context, pattern, null);
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,com.veyron2.services.mounttable.MountEntry,java.lang.Void> glob(com.veyron2.ipc.Context context, java.lang.String pattern, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
	    // Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}
		return this.globable.glob(context, pattern, veyronOpts);
	}
	// Methods from sub-interface GlobWatcher.
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,com.veyron2.services.watch.ChangeBatch,java.lang.Void> watchGlob(com.veyron2.ipc.Context context, com.veyron2.services.watch.GlobRequest Req) throws com.veyron2.ipc.VeyronException {
		return watchGlob(context, Req, null);
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,com.veyron2.services.watch.ChangeBatch,java.lang.Void> watchGlob(com.veyron2.ipc.Context context, com.veyron2.services.watch.GlobRequest Req, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
	    // Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}
		return this.globWatcher.watchGlob(context, Req, veyronOpts);
	}
	// Methods from sub-interface QueryWatcher.
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,com.veyron2.services.watch.ChangeBatch,java.lang.Void> watchQuery(com.veyron2.ipc.Context context, com.veyron2.services.watch.QueryRequest Req) throws com.veyron2.ipc.VeyronException {
		return watchQuery(context, Req, null);
	}
	@Override
	public com.veyron2.vdl.ClientStream<java.lang.Void,com.veyron2.services.watch.ChangeBatch,java.lang.Void> watchQuery(com.veyron2.ipc.Context context, com.veyron2.services.watch.QueryRequest Req, com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException {
		// Add VDL path option.
		// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
	    // Java to encoding/decoding from vom.Value objects.
		if (veyronOpts == null) veyronOpts = new com.veyron2.Options();
		if (!veyronOpts.has(com.veyron2.OptionDefs.VDL_INTERFACE_PATH)) {
			veyronOpts.set(com.veyron2.OptionDefs.VDL_INTERFACE_PATH, ObjectStub.vdlIfacePathOpt);
		}
		return this.queryWatcher.watchQuery(context, Req, veyronOpts);
	}
}
