// This file was auto-generated by the veyron vdl tool.
// Source(s):  service.vdl
package com.veyron2.services.store.gen_impl;

import com.google.common.reflect.TypeToken;
import com.veyron2.ipc.ServerCall;
import com.veyron2.ipc.VeyronException;
import com.veyron2.services.store.Conflict;
import com.veyron2.services.store.Entry;
import com.veyron2.services.store.ObjectFactory;
import com.veyron2.services.store.ObjectService;
import com.veyron2.services.store.QueryResult;
import com.veyron2.services.store.Stat;
import com.veyron2.services.store.Store;
import com.veyron2.services.store.StoreFactory;
import com.veyron2.services.store.StoreService;
import com.veyron2.services.store.TransactionID;
import com.veyron2.services.store.VeyronConsts;
import com.veyron2.vdl.Stream;
import java.util.ArrayList;

public class StoreServiceWrapper {

	private final StoreService service;

	public StoreServiceWrapper(StoreService service) {
		this.service = service;
	}
	/**
	 * Returns all tags associated with the provided method or null if the method isn't implemented
	 * by this service.
	 */
	public Object[] getMethodTags(ServerCall call, String method) throws VeyronException { 
		if ("createTransaction".equals(method)) {
			return new Object[]{  };
		}
		if ("commit".equals(method)) {
			return new Object[]{  };
		}
		if ("abort".equals(method)) {
			return new Object[]{  };
		}
		if ("readConflicts".equals(method)) {
			return new Object[]{  };
		}
		throw new VeyronException("method: " + method + " not found");
	}
	// Methods from interface Store.
	public void createTransaction(ServerCall call, TransactionID TID, ArrayList<Object> Options) throws VeyronException { 
		this.service.createTransaction(call, TID, Options);
	}
	public void commit(ServerCall call, TransactionID TID) throws VeyronException { 
		this.service.commit(call, TID);
	}
	public void abort(ServerCall call, TransactionID TID) throws VeyronException { 
		this.service.abort(call, TID);
	}
	public void readConflicts(ServerCall call) throws VeyronException { 
		final ServerCall serverCall = call;
		final Stream<Conflict,Void> stream = new Stream<Conflict,Void>() {
			@Override
			public void send(Conflict item) throws VeyronException {
				serverCall.send(item);
			}
			@Override
			public Void recv() throws java.io.EOFException, VeyronException {
				final TypeToken<?> type = new TypeToken<Void>() {};
				final Object result = serverCall.recv(type);
				try {
					return (Void)result;
				} catch (java.lang.ClassCastException e) {
					throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
				}
			}
		};
		this.service.readConflicts(call, stream);
	}
}
