// This file was auto-generated by the veyron vdl tool.
// Source: service.vdl
package com.veyron2.services.store;

/**
 * Store is the client interface to the storage system.
 */

@com.veyron2.vdl.VeyronService(serviceWrapper=com.veyron2.services.store.gen_impl.StoreServiceWrapper.class)
public interface StoreService  {

    
    // CreateTransaction creates the transaction and sets the options for it.

    public void createTransaction(final com.veyron2.ipc.ServerContext context, final com.veyron2.services.store.TransactionID TID, final java.util.ArrayList<java.lang.Object> Options) throws com.veyron2.ipc.VeyronException;

    
    // Commit commits the changes in the transaction to the store.  The
// operation is atomic, so all mutations are performed, or none.  Returns an
// error if the transaction aborted.

    public void commit(final com.veyron2.ipc.ServerContext context, final com.veyron2.services.store.TransactionID TID) throws com.veyron2.ipc.VeyronException;

    
    // Abort discards a transaction.  This is an optimization; transactions
// eventually time out and get discarded.  However, live transactions
// consume resources, so if you know that you won't be using a transaction
// anymore, you should discard it explicitly.

    public void abort(final com.veyron2.ipc.ServerContext context, final com.veyron2.services.store.TransactionID TID) throws com.veyron2.ipc.VeyronException;

    
    // ReadConflicts returns the stream of conflicts to store values.  A
// conflict occurs when there is a concurrent modification to a value.

    public void readConflicts(final com.veyron2.ipc.ServerContext context, com.veyron2.vdl.Stream<java.lang.Void, com.veyron2.services.store.Conflict> stream) throws com.veyron2.ipc.VeyronException;

}
