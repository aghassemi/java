// This file was auto-generated by the veyron vdl tool.
// Source(s):  service.vdl
package com.veyron2.services.mounttable.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.OptionDefs;
import com.veyron2.Options;
import com.veyron2.RuntimeFactory;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.ClientStream;
import java.util.ArrayList;

public class Client { 
	/* Bind methods for interfaces in file: service.vdl. */
	public static Globable bindGlobable(String name) throws VeyronException {
		return bindGlobable(name, null);
	}
	public static Globable bindGlobable(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new GlobableStub(client, name);
	}
	public static MountTable bindMountTable(String name) throws VeyronException {
		return bindMountTable(name, null);
	}
	public static MountTable bindMountTable(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		final Globable globable = Client.bindGlobable(name, veyronOpts);
		return new MountTableStub(client, name, globable);
	}

	/* Client stubs for interfaces in file: service.vdl. */
	private static class GlobableStub implements Globable {
		private static final String vdlIfacePathOpt = "com.veyron2.services.mounttable.vdlgen.Globable";
		private final com.veyron2.ipc.Client client;
		private final String name;

		GlobableStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface Globable.
		@Override
		public ClientStream<Void,MountEntry,Void> glob(Context context, String pattern) throws VeyronException {
			return glob(context, pattern, null);
		}
		@Override
		public ClientStream<Void,MountEntry,Void> glob(Context context, String pattern, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ pattern };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, GlobableStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Glob", inArgs, veyronOpts);

			return new ClientStream<Void, MountEntry, Void>() {
				@Override
				public void send(Void item) throws VeyronException {
					call.send(item);
				}
				@Override
				public MountEntry recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<MountEntry>() {};
					final Object result = call.recv(type);
					try {
						return (MountEntry)result;
					} catch (ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
				@Override
				public Void finish() throws VeyronException {
					// Prepare output argument and finish the call.
					final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
					call.finish(resultTypes);
					return null;

				}
			};
		}
	}
	private static class MountTableStub implements MountTable {
		private static final String vdlIfacePathOpt = "com.veyron2.services.mounttable.vdlgen.MountTable";
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final Globable globable;

		MountTableStub(com.veyron2.ipc.Client client, String name, Globable globable) {
			this.client = client;
			this.name = name;
			this.globable = globable;
		}
		// Methods from interface MountTable.
		@Override
		public void mount(Context context, String Server, int TTL) throws VeyronException {
			mount(context, Server, TTL, null);
		}
		@Override
		public void mount(Context context, String Server, int TTL, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Server, new Integer(TTL) };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, MountTableStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Mount", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public void unmount(Context context, String Server) throws VeyronException {
			unmount(context, Server, null);
		}
		@Override
		public void unmount(Context context, String Server, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Server };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, MountTableStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "Unmount", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public MountTable.ResolveStepOut resolveStep(Context context) throws VeyronException {
			return resolveStep(context, null);
		}
		@Override
		public MountTable.ResolveStepOut resolveStep(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, MountTableStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "ResolveStep", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<ArrayList<MountedServer>>() {}, new TypeToken<String>() {} };
			final Object[] results = call.finish(resultTypes);
			// Pack the results.
			final MountTable.ResolveStepOut ret = new MountTable.ResolveStepOut();
			int resultIdx = 0;
			ret.servers = (ArrayList<MountedServer>)results[resultIdx++];
			ret.suffix = (String)results[resultIdx++];
			return ret;

		}
		// Methods from sub-interface Globable.
		@Override
		public ClientStream<Void,MountEntry,Void> glob(Context context, String pattern) throws VeyronException {
			return glob(context, pattern, null);
		}
		@Override
		public ClientStream<Void,MountEntry,Void> glob(Context context, String pattern, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, MountTableStub.vdlIfacePathOpt);
			}
			return this.globable.glob(context, pattern, veyronOpts);
		}
	}
}
