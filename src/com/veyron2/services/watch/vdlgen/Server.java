// This file was auto-generated by the veyron vdl tool.
// Source(s):  service.vdl
package com.veyron2.services.watch.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.ipc.ServerCall;
import com.veyron2.ipc.VeyronException;
import com.veyron2.vdl.Stream;

public class Server { 
	/* Server stub creation methods for interfaces in file: service.vdl. */
	public static Object newGlobWatcher(GlobWatcherService service) { 
		return new GlobWatcherStub(service);
	}
	public static Object newQueryWatcher(QueryWatcherService service) { 
		return new QueryWatcherStub(service);
	}
	
	/* Server stubs for interfaces in file: service.vdl. */
	public static class GlobWatcherStub {
		private final GlobWatcherService service;

		GlobWatcherStub(GlobWatcherService service) {
			this.service = service;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			if (method == "WatchGlob") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface GlobWatcher.
		public void watchGlob(ServerCall call, GlobRequest Req) throws VeyronException { 
			final ServerCall serverCall = call;
			final Stream<ChangeBatch,Void> stream = new Stream<ChangeBatch,Void>() {
				@Override
				public void send(ChangeBatch item) throws VeyronException {
					serverCall.send(item);
				}
				@Override
				public Void recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Void>() {};
					final Object result = serverCall.recv(type);
					try {
						return (Void)result;
					} catch (java.lang.ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
			};
			this.service.watchGlob(call, Req, stream);
		}
	}
	public static class QueryWatcherStub {
		private final QueryWatcherService service;

		QueryWatcherStub(QueryWatcherService service) {
			this.service = service;
		}
		/**
		 * Returns all tags associated with the provided method or null if the method isn't implemented
		 * by this service.
		 */
		@SuppressWarnings("unused")
		public Object[] getMethodTags(ServerCall call, String method) { 
			if (method == "WatchQuery") {
				return new Object[]{  };
			}
			return null;
		}
		// Methods from interface QueryWatcher.
		public void watchQuery(ServerCall call, QueryRequest Req) throws VeyronException { 
			final ServerCall serverCall = call;
			final Stream<ChangeBatch,Void> stream = new Stream<ChangeBatch,Void>() {
				@Override
				public void send(ChangeBatch item) throws VeyronException {
					serverCall.send(item);
				}
				@Override
				public Void recv() throws java.io.EOFException, VeyronException {
					final TypeToken<?> type = new TypeToken<Void>() {};
					final Object result = serverCall.recv(type);
					try {
						return (Void)result;
					} catch (java.lang.ClassCastException e) {
						throw new VeyronException("Unexpected result type: " + result.getClass().getCanonicalName());
					}
				}
			};
			this.service.watchQuery(call, Req, stream);
		}
	}
}
