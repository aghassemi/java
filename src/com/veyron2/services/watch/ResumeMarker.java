// This file was auto-generated by the veyron vdl tool.
// Source: service.vdl
package com.veyron2.services.watch;

/**
 * type ResumeMarker []byte 
 * ResumeMarker specifies how much of the existing underlying state
 * is delivered to the client when the watch request is received by
 * the system. The client can set this marker in one of the
 * following ways to get different semantics:
 * 
 * (A) Parameter is left empty.
 * Semantics: Fetch initial state.
 * The client wants the entities' initial states to be delivered.
 * See the description in "Initial State".
 * 
 * (B) Parameter is set to the string "now" (UTF-8 encoding).
 * Semantics: Fetch new changes only.
 * The client just wants to get the changes received by the
 * system after the watch point. The system may deliver changes
 * from before the watch point as well.
 * 
 * (C) Parameter is set to a value received in an earlier
 * Change.ResumeMarker field while watching the same entity with
 * the same query.
 * Semantics: Resume from a specific point.
 * The client wants to receive the changes from a specific point
 * - this value must correspond to a value received in the
 * Change.ResumeMarker field. The system may deliver changes
 * from before the ResumeMarker as well.  If the system cannot
 * resume the stream from this point (e.g., if it is too far
 * behind in the stream), it can return the
 * ErrUnknownResumeMarker error.
 * ResumeMarkers are received in lexicographical order.
 * 
 * An implementation MUST support the empty string "" marker
 * (initial state fetching) and the "now" marker. It need not
 * support resuming from a specific point.
 **/
public final class ResumeMarker implements java.util.List<java.lang.Byte> {
    private java.util.List<java.lang.Byte> impl;

    public ResumeMarker(java.util.List<java.lang.Byte> impl) {
        this.impl = impl;
    }
    public java.util.List<java.lang.Byte> getValue() { return this.impl; }

    public void setValue(java.util.List<java.lang.Byte> newImpl) {
        this.impl = newImpl;
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (this.getClass() != obj.getClass()) return false;
        final ResumeMarker other = (ResumeMarker)obj;
        if (!(this.impl.equals(other.impl))) return false;
        return true;
    }
    @Override
    public int hashCode() {
        return (impl == null ? 0 : impl.hashCode());
    }
    @Override
    public void add(int location, java.lang.Byte object) {
        impl.add(location, object);
    }
    @Override
    public boolean add(java.lang.Byte object) {
        return impl.add(object);
    }
    @Override
    public boolean addAll(int location, java.util.Collection<? extends java.lang.Byte> collection) {
        return impl.addAll(location, collection);
    }
    @Override
    public boolean addAll(java.util.Collection<? extends java.lang.Byte> collection) {
        return impl.addAll(collection);
    }
    @Override
    public void clear() {
        impl.clear();
    }
    @Override
    public boolean contains(java.lang.Object object) {
        return impl.contains(object);
    }
    @Override
    public boolean containsAll(java.util.Collection<?> collection) {
        return impl.containsAll(collection);
    }
    @Override
    public java.lang.Byte get(int location) {
        return impl.get(location);
    }
    @Override
    public int indexOf(java.lang.Object object) {
        return impl.indexOf(object);
    }
    @Override
    public boolean isEmpty() {
        return impl.isEmpty();
    }
    @Override
    public java.util.Iterator<java.lang.Byte> iterator() {
        return impl.iterator();
    }
    @Override
    public int lastIndexOf(java.lang.Object object) {
        return impl.lastIndexOf(object);
    }
    @Override
    public java.util.ListIterator<java.lang.Byte> listIterator() {
        return impl.listIterator();
    }
    @Override
    public java.util.ListIterator<java.lang.Byte> listIterator(int location) {
        return impl.listIterator(location);
    }
    @Override
    public java.lang.Byte remove(int location) {
        return impl.remove(location);
    }
    @Override
    public boolean remove(java.lang.Object object) {
        return impl.remove(object);
    }
    @Override
    public boolean removeAll(java.util.Collection<?> collection) {
        return impl.removeAll(collection);
    }
    @Override
    public boolean retainAll(java.util.Collection<?> collection) {
        return impl.retainAll(collection);
    }
    @Override
    public java.lang.Byte set(int location, java.lang.Byte object) {
        return impl.set(location, object);
    }
    @Override
    public int size() {
        return impl.size();
    }
    @Override
    public java.util.List<java.lang.Byte> subList(int start, int end) {
        return impl.subList(start, end);
    }
    @Override
    public java.lang.Object[] toArray() {
        return impl.toArray();
    }
    @Override
    public <T> T[] toArray(T[] array) {
        return impl.toArray(array);
    }
}
