// This file was auto-generated by the veyron vdl tool.
// Source(s):  proximity.vdl
package com.veyron2.services.proximity.vdlgen;

import com.google.common.reflect.TypeToken;
import com.veyron2.OptionDefs;
import com.veyron2.Options;
import com.veyron2.RuntimeFactory;
import com.veyron2.ipc.Context;
import com.veyron2.ipc.VeyronException;
import java.util.ArrayList;

public class Client { 
	/* Bind methods for interfaces in file: proximity.vdl. */
	public static ProximityAnnouncer bindProximityAnnouncer(String name) throws VeyronException {
		return bindProximityAnnouncer(name, null);
	}
	public static ProximityAnnouncer bindProximityAnnouncer(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new ProximityAnnouncerStub(client, name);
	}
	public static ProximityScanner bindProximityScanner(String name) throws VeyronException {
		return bindProximityScanner(name, null);
	}
	public static ProximityScanner bindProximityScanner(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		return new ProximityScannerStub(client, name);
	}
	public static Proximity bindProximity(String name) throws VeyronException {
		return bindProximity(name, null);
	}
	public static Proximity bindProximity(String name, Options veyronOpts) throws VeyronException {
		com.veyron2.ipc.Client client = null;
		if (veyronOpts != null && veyronOpts.get(OptionDefs.CLIENT) != null) {
			client = veyronOpts.get(OptionDefs.CLIENT, com.veyron2.ipc.Client.class);
		} else if (veyronOpts != null && veyronOpts.get(OptionDefs.RUNTIME) != null) {
			client = veyronOpts.get(OptionDefs.RUNTIME, com.veyron2.Runtime.class).getClient();
		} else {
			client = RuntimeFactory.getRuntime().getClient();
		}
		final ProximityAnnouncer proximityAnnouncer = Client.bindProximityAnnouncer(name, veyronOpts);
		final ProximityScanner proximityScanner = Client.bindProximityScanner(name, veyronOpts);
		return new ProximityStub(client, name, proximityAnnouncer, proximityScanner);
	}

	/* Client stubs for interfaces in file: proximity.vdl. */
	private static class ProximityAnnouncerStub implements ProximityAnnouncer {
		private static final String vdlIfacePathOpt = "com.veyron2.services.proximity.vdlgen.ProximityAnnouncer";
		private final com.veyron2.ipc.Client client;
		private final String name;

		ProximityAnnouncerStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface ProximityAnnouncer.
		@Override
		public void registerName(Context context, String Name) throws VeyronException {
			registerName(context, Name, null);
		}
		@Override
		public void registerName(Context context, String Name, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Name };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProximityAnnouncerStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "RegisterName", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
		@Override
		public void unregisterName(Context context, String Name) throws VeyronException {
			unregisterName(context, Name, null);
		}
		@Override
		public void unregisterName(Context context, String Name, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{ Name };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProximityAnnouncerStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "UnregisterName", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{  };
			call.finish(resultTypes);

		}
	}
	private static class ProximityScannerStub implements ProximityScanner {
		private static final String vdlIfacePathOpt = "com.veyron2.services.proximity.vdlgen.ProximityScanner";
		private final com.veyron2.ipc.Client client;
		private final String name;

		ProximityScannerStub(com.veyron2.ipc.Client client, String name) {
			this.client = client;
			this.name = name;
		}
		// Methods from interface ProximityScanner.
		@Override
		public ArrayList<Device> nearbyDevices(Context context) throws VeyronException {
			return nearbyDevices(context, null);
		}
		@Override
		public ArrayList<Device> nearbyDevices(Context context, Options veyronOpts) throws VeyronException {
			// Prepare input arguments.
			final Object[] inArgs = new Object[]{  };

			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
			// Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProximityScannerStub.vdlIfacePathOpt);
			}

			// Start the call.
			final com.veyron2.ipc.Client.Call call = this.client.startCall(context, this.name, "NearbyDevices", inArgs, veyronOpts);

			// Prepare output argument and finish the call.
			final TypeToken<?>[] resultTypes = new TypeToken<?>[]{ new TypeToken<ArrayList<Device>>() {} };
			return (ArrayList<Device>)call.finish(resultTypes)[0];

		}
	}
	private static class ProximityStub implements Proximity {
		private static final String vdlIfacePathOpt = "com.veyron2.services.proximity.vdlgen.Proximity";
		private final com.veyron2.ipc.Client client;
		private final String name;
		private final ProximityAnnouncer proximityAnnouncer;
		private final ProximityScanner proximityScanner;

		ProximityStub(com.veyron2.ipc.Client client, String name, ProximityAnnouncer proximityAnnouncer, ProximityScanner proximityScanner) {
			this.client = client;
			this.name = name;
			this.proximityAnnouncer = proximityAnnouncer;
			this.proximityScanner = proximityScanner;
		}
		// Methods from sub-interface ProximityAnnouncer.
		@Override
		public void registerName(Context context, String Name) throws VeyronException {
			registerName(context, Name, null);
		}
		@Override
		public void registerName(Context context, String Name, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProximityStub.vdlIfacePathOpt);
			}
			this.proximityAnnouncer.registerName(context, Name, veyronOpts);
		}
		@Override
		public void unregisterName(Context context, String Name) throws VeyronException {
			unregisterName(context, Name, null);
		}
		@Override
		public void unregisterName(Context context, String Name, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProximityStub.vdlIfacePathOpt);
			}
			this.proximityAnnouncer.unregisterName(context, Name, veyronOpts);
		}
		// Methods from sub-interface ProximityScanner.
		@Override
		public ArrayList<Device> nearbyDevices(Context context) throws VeyronException {
			return nearbyDevices(context, null);
		}
		@Override
		public ArrayList<Device> nearbyDevices(Context context, Options veyronOpts) throws VeyronException {
			// Add VDL path option.
			// NOTE(spetrovic): this option is temporary and will be removed soon after we switch
		    // Java to encoding/decoding from vom.Value objects.
			if (veyronOpts == null) veyronOpts = new Options();
			if (!veyronOpts.has(OptionDefs.VDL_INTERFACE_PATH)) {
				veyronOpts.set(OptionDefs.VDL_INTERFACE_PATH, ProximityStub.vdlIfacePathOpt);
			}
			return this.proximityScanner.nearbyDevices(context, veyronOpts);
		}
	}
}
