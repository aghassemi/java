// This file was auto-generated by the veyron vdl tool.
// Source: service.vdl
package com.veyron2.services.store;

/**
 * type QueryResult struct{NestedResult veyron2/services/store.NestedResult int64;Name string;Fields map[string]any;Value any} 
 * QueryResult is a single level result.  If the query contained nested
 * queries, they will be sent as subsequent QueryResults.  If the
 * QueryResult is for a known type, the value is stored in Value.
 * If the result is for a dynamic type using selection, Fields will
 * be populated appropriately and Value will be nil.
 * 
 * Examples
 * 1) Return Team objects: "/teamsapp/teams".Query("*:Team")
 * QueryResult{
 * NestedResult: 0,
 * Name: "hornets",
 * Fields: nil,
 * Value: Team{Location: "CA", Mascot:"Buzz"},
 * },
 * QueryResult{
 * NestedResult: 0,
 * Name: "sharks",
 * Fields: nil,
 * Value: Team{Location: "NY", Mascot:"Jaws"},
 * }
 * 
 * 2) Return just the mascot names: "/teamsapp/teams".Query("*:Team{Mascot}")
 * QueryResult{
 * NestedResult: 0,
 * Name: "hornets",
 * Fields: {"Mascot": "Buzz"},
 * Value: nil,
 * },
 * QueryResult{
 * NestedResult: 0,
 * Name: "sharks",
 * Fields: {"Mascot": "Jaws"},
 * Value: nil
 * }
 * 
 * 3) Return the players for each team: "/teamsapp/teams".Query("*:Team{., players:Player")
 * QueryResult{
 * NestedResult: 0,
 * Name: "hornets",
 * Fields: {
 * ".": Team{Location: "CA", Mascot: "Buzz"},
 * Any subsequent QueryResult with a NestedResult of 1 should be
 * materialized in this field.
 * "players": NestedResult(1),
 * },
 * Value:nil
 * },
 * QueryResult{
 * NestedResult: 1,
 * Name: "John",
 * Fields: nil,
 * Value: Player{Age: 23, Hometown: "New York"},
 * },
 * QueryResult{
 * NestedResult: 1,
 * Name: "Julie",
 * Fields: nil,
 * Value: Player{Age: 24, Hometown: "Charlotte"},
 * },
 * QueryResult{
 * NestedResult: 0,
 * Name: "sharks",
 * Fields:
 * ".": Team{Location: "NY", Mascot: "Jaws"},
 * "players": NestedResult(2),
 * },
 * Value:nil
 * },
 * QueryResult{
 * NestedResult: 2,
 * Name: "Jamie",
 * Fields: nil,
 * Value: Player{Age: 20, Hometown: "Seattle"},
 * },
 * QueryResult{
 * NestedResult: 2,
 * Name: "Jacob",
 * Fields: nil,
 * Value: Player{Age: 25, Hometown: "Miami"},
 * }
 * 
 * Nested results may in turn contain their own nested results.  A
 * NestedResult value is always greater than the parent's NestedResult value.
 * In a stream of results, a decrease in the NestedResult values means
 * that the group is finished.  Here is an example result stream containing
 * only the NestedResult values.  The parentheses show the grouping.
 * (0 (1 (2, 2), 1 (3), 1 (4, 4, 4)), (0 (1, 1 (5, 5)))
 **/
public final class QueryResult {
    
    
      private com.veyron2.services.store.NestedResult nestedResult;
    
      private java.lang.String name;
    
      private java.util.HashMap<java.lang.String, java.lang.Object> fields;
    
      private java.lang.Object value;
    

    
    public QueryResult(final com.veyron2.services.store.NestedResult nestedResult, final java.lang.String name, final java.util.HashMap<java.lang.String, java.lang.Object> fields, final java.lang.Object value) {
        
            this.nestedResult = nestedResult;
        
            this.name = name;
        
            this.fields = fields;
        
            this.value = value;
        
    }

    
    
    public com.veyron2.services.store.NestedResult getNestedResult() {
        return this.nestedResult;
    }
    public void setNestedResult(com.veyron2.services.store.NestedResult nestedResult) {
        this.nestedResult = nestedResult;
    }
    
    public java.lang.String getName() {
        return this.name;
    }
    public void setName(java.lang.String name) {
        this.name = name;
    }
    
    public java.util.HashMap<java.lang.String, java.lang.Object> getFields() {
        return this.fields;
    }
    public void setFields(java.util.HashMap<java.lang.String, java.lang.Object> fields) {
        this.fields = fields;
    }
    
    public java.lang.Object getValue() {
        return this.value;
    }
    public void setValue(java.lang.Object value) {
        this.value = value;
    }
    

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (this.getClass() != obj.getClass()) return false;
        final QueryResult other = (QueryResult)obj;

        
        
        if (this.nestedResult == null) {
            if (other.nestedResult != null) {
                return false;
            }
        } else if (!this.nestedResult.equals(other.nestedResult)) {
            return false;
        }
         
        
        
        if (this.name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!this.name.equals(other.name)) {
            return false;
        }
         
        
        
        if (this.fields == null) {
            if (other.fields != null) {
                return false;
            }
        } else if (!this.fields.equals(other.fields)) {
            return false;
        }
         
        
        
        if (this.value == null) {
            if (other.value != null) {
                return false;
            }
        } else if (!this.value.equals(other.value)) {
            return false;
        }
         
         
        return true;
    }
    @Override
    public int hashCode() {
        int result = 1;
        final int prime = 31;
        
        result = prime * result + (nestedResult == null ? 0 : nestedResult.hashCode());
        
        result = prime * result + (name == null ? 0 : name.hashCode());
        
        result = prime * result + (fields == null ? 0 : fields.hashCode());
        
        result = prime * result + (value == null ? 0 : value.hashCode());
        
        return result;
    }
}