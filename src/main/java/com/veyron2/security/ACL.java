// This file was auto-generated by the veyron vdl tool.
// Source: types.vdl
package com.veyron2.security;

/**
 * type ACL struct{In map[veyron2/security.BlessingPattern string]veyron2/security.LabelSet uint32;NotIn map[string]veyron2/security.LabelSet} 
 * ACL (Access Control List) tracks the set of blessings that grant
 * access to an object and the type of access the blessing grants.
 * 
 * When a principal presents multiple blessings, it should be authorized
 * if any one of those blessings matches the ACL. Since the principal
 * chooses the subset of its blessings to share (and can thus withold
 * any particular one), requiring all presented blessings to match the
 * ACL does not provide any security benefits.
 **/
public final class ACL {
    
    
      private java.util.HashMap<com.veyron2.security.BlessingPattern, com.veyron2.security.LabelSet> in;
    
      private java.util.HashMap<java.lang.String, com.veyron2.security.LabelSet> notIn;
    

    
    public ACL(final java.util.HashMap<com.veyron2.security.BlessingPattern, com.veyron2.security.LabelSet> in, final java.util.HashMap<java.lang.String, com.veyron2.security.LabelSet> notIn) {
        
            this.in = in;
        
            this.notIn = notIn;
        
    }

    
    
    public java.util.HashMap<com.veyron2.security.BlessingPattern, com.veyron2.security.LabelSet> getIn() {
        return this.in;
    }
    public void setIn(java.util.HashMap<com.veyron2.security.BlessingPattern, com.veyron2.security.LabelSet> in) {
        this.in = in;
    }
    
    public java.util.HashMap<java.lang.String, com.veyron2.security.LabelSet> getNotIn() {
        return this.notIn;
    }
    public void setNotIn(java.util.HashMap<java.lang.String, com.veyron2.security.LabelSet> notIn) {
        this.notIn = notIn;
    }
    

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (this.getClass() != obj.getClass()) return false;
        final ACL other = (ACL)obj;

        
        
        if (this.in == null) {
            if (other.in != null) {
                return false;
            }
        } else if (!this.in.equals(other.in)) {
            return false;
        }
         
        
        
        if (this.notIn == null) {
            if (other.notIn != null) {
                return false;
            }
        } else if (!this.notIn.equals(other.notIn)) {
            return false;
        }
         
         
        return true;
    }
    @Override
    public int hashCode() {
        int result = 1;
        final int prime = 31;
        
        result = prime * result + (in == null ? 0 : in.hashCode());
        
        result = prime * result + (notIn == null ? 0 : notIn.hashCode());
        
        return result;
    }
}