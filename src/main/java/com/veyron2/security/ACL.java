// This file was auto-generated by the veyron vdl tool.
// Source: types.vdl
package com.veyron2.security;

/**
 * type ACL struct{In veyron2/security.Entries struct{Principals map[veyron2/security.PrincipalPattern string]veyron2/security.LabelSet uint32};NotIn veyron2/security.Entries} 
 * ACL (Access Control List) tracks which principals have access to an object
 * and which principals specifically do not have access to an object.
 * For example:
 * ACL {
 * In {
 * Principals {
 * "user1": ["Read", "Write"],
 * "user2": ["Read"],
 * }
 * }
 * NotIn {
 * Principals {
 * "user1": ["Write"],
 * }
 * }
 * }
 * NotIn subtracts privileges.  In this example, it says that "user1" has
 * only "Read" access.  All of engineering has read access except for
 * engineering interns.
 * 
 * Principals can have multiple names.  As long as the principal has a name
 * that matches In and not NotIn, it is authorized. The reasoning is that the
 * principal can always hide a name if it wants to, so requiring all names to
 * satisfy the policy does not make sense.
 * 
 * Formally,
 * 
 * Delegate(pattern P, name N) checks if some name that exactly matches P is
 * equal to or blessed by N.
 * If P is of the form p_0/.../p_k; Delegate(P, N) is true iff N is of the form
 * n_0/.../n_m such that m <= k and for all i from 0 to m, p_i = n_i.
 * If P is of the form p_0/.../p_k; Delegate(P, N) is true iff N is of the
 * form n_0/.../n_m such that for all i from 0 to min(m, k), p_i = n_i.
 * 
 * Blesser(pattern P, name N) checks if some name that exactly matches P is
 * equal to or a blesser of N.
 * If P is of the form p_0/.../p_k; Blesser(P, N) is true iff N is of the form
 * n_0/.../n_m such that m >= k and for all i from 0 to k, p_i = n_i.
 * If P is of the form p_0/.../p_k; Blesser(P, N) is true iff N is of the form
 * n_0/.../n_m such that m >= k and for all i from 0 to k, p_i = n_i.
 * 
 * In(label L) = { pattern P | L ∈ ACL.In.Principals[P] }
 * NotIn(label L) = { pattern P | L ∈ ACL.NotIn.Principals[P] }
 * 
 * Matches(label L) = { id I | ∃ name N ∈ I.Names() |
 * ∃ P ∈ In(L) | Delegate(P, N)
 * ∧
 * ∀ P ∈ NotIn(L) ~Blesser(P, N)
 * }
 **/
public final class ACL {
    
    
      private com.veyron2.security.Entries in;
    
      private com.veyron2.security.Entries notIn;
    

    
    public ACL(final com.veyron2.security.Entries in, final com.veyron2.security.Entries notIn) {
        
            this.in = in;
        
            this.notIn = notIn;
        
    }

    
    
    public com.veyron2.security.Entries getIn() {
        return this.in;
    }
    public void setIn(com.veyron2.security.Entries in) {
        this.in = in;
    }
    
    public com.veyron2.security.Entries getNotIn() {
        return this.notIn;
    }
    public void setNotIn(com.veyron2.security.Entries notIn) {
        this.notIn = notIn;
    }
    

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (this.getClass() != obj.getClass()) return false;
        final ACL other = (ACL)obj;

        
        
        if (this.in == null) {
            if (other.in != null) {
                return false;
            }
        } else if (!this.in.equals(other.in)) {
            return false;
        }
         
        
        
        if (this.notIn == null) {
            if (other.notIn != null) {
                return false;
            }
        } else if (!this.notIn.equals(other.notIn)) {
            return false;
        }
         
         
        return true;
    }
    @Override
    public int hashCode() {
        int result = 1;
        final int prime = 31;
        
        result = prime * result + (in == null ? 0 : in.hashCode());
        
        result = prime * result + (notIn == null ? 0 : notIn.hashCode());
        
        return result;
    }
}