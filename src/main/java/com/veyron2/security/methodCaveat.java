// This file was auto-generated by the veyron vdl tool.
// Source: caveat.vdl
package com.veyron2.security;

/**
 * type methodCaveat []string 
 * methodCaveat represents a caveat that validates iff the method being invoked
 * is included in this list. An empty list implies that no method can be
 * invoked (i.e., the holder of a blessing with this caveat cannot act as a
 * client).
 **/
public final class methodCaveat implements java.util.List<java.lang.String>, android.os.Parcelable, java.io.Serializable {
    static final long serialVersionUID = 0L;

    private java.util.List<java.lang.String> impl;

    public methodCaveat(java.util.List<java.lang.String> impl) {
        this.impl = impl;
    }
    public java.util.List<java.lang.String> getValue() { return this.impl; }

    public void setValue(java.util.List<java.lang.String> newImpl) {
        this.impl = newImpl;
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (this.getClass() != obj.getClass()) return false;
        final methodCaveat other = (methodCaveat)obj;
        if (!(this.impl.equals(other.impl))) return false;
        return true;
    }
    @Override
    public int hashCode() {
        return (impl == null ? 0 : impl.hashCode());
    }
    @Override
    public void add(int location, java.lang.String object) {
        impl.add(location, object);
    }
    @Override
    public boolean add(java.lang.String object) {
        return impl.add(object);
    }
    @Override
    public boolean addAll(int location, java.util.Collection<? extends java.lang.String> collection) {
        return impl.addAll(location, collection);
    }
    @Override
    public boolean addAll(java.util.Collection<? extends java.lang.String> collection) {
        return impl.addAll(collection);
    }
    @Override
    public void clear() {
        impl.clear();
    }
    @Override
    public boolean contains(java.lang.Object object) {
        return impl.contains(object);
    }
    @Override
    public boolean containsAll(java.util.Collection<?> collection) {
        return impl.containsAll(collection);
    }
    @Override
    public java.lang.String get(int location) {
        return impl.get(location);
    }
    @Override
    public int indexOf(java.lang.Object object) {
        return impl.indexOf(object);
    }
    @Override
    public boolean isEmpty() {
        return impl.isEmpty();
    }
    @Override
    public java.util.Iterator<java.lang.String> iterator() {
        return impl.iterator();
    }
    @Override
    public int lastIndexOf(java.lang.Object object) {
        return impl.lastIndexOf(object);
    }
    @Override
    public java.util.ListIterator<java.lang.String> listIterator() {
        return impl.listIterator();
    }
    @Override
    public java.util.ListIterator<java.lang.String> listIterator(int location) {
        return impl.listIterator(location);
    }
    @Override
    public java.lang.String remove(int location) {
        return impl.remove(location);
    }
    @Override
    public boolean remove(java.lang.Object object) {
        return impl.remove(object);
    }
    @Override
    public boolean removeAll(java.util.Collection<?> collection) {
        return impl.removeAll(collection);
    }
    @Override
    public boolean retainAll(java.util.Collection<?> collection) {
        return impl.retainAll(collection);
    }
    @Override
    public java.lang.String set(int location, java.lang.String object) {
        return impl.set(location, object);
    }
    @Override
    public int size() {
        return impl.size();
    }
    @Override
    public java.util.List<java.lang.String> subList(int start, int end) {
        return impl.subList(start, end);
    }
    @Override
    public java.lang.Object[] toArray() {
        return impl.toArray();
    }
    @Override
    public <T> T[] toArray(T[] array) {
        return impl.toArray(array);
    }
    @Override
    public int describeContents() {
        return 0;
    }
    @Override
    public void writeToParcel(android.os.Parcel out, int flags) {
        com.veyron2.vdl.ParcelUtil.writeValue(out, impl);
    }
    public static final android.os.Parcelable.Creator<methodCaveat> CREATOR = new android.os.Parcelable.Creator<methodCaveat>() {
        @Override
        public methodCaveat createFromParcel(android.os.Parcel in) {
            return new methodCaveat(in);
        }
        @Override
        public methodCaveat[] newArray(int size) {
            return new methodCaveat[size];
        }
    };
    private methodCaveat(android.os.Parcel in) {
        impl = (java.util.List<java.lang.String>) com.veyron2.vdl.ParcelUtil.readValue(in, getClass().getClassLoader(), impl);
    }
}
