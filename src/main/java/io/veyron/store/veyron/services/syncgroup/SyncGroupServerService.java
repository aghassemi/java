// This file was auto-generated by the veyron vdl tool.
// Source: syncgroup.vdl
package io.veyron.store.veyron.services.syncgroup;

/**
 * SyncGroupServer is the collection of calls on SyncGroup objects at
 * a SyncGroup server.  The calls used most often, like Create and Join, are
 * used almost exclusively by the Store.  Clients typically call the Store to
 * cause these things to happen.
 * 
 * Calls starting with "Set" take an eTag value that may be either empty, or
 * the value of ETag from a recent response to Get(), Watch(), or GetACL().
 */

@com.veyron2.vdl.VeyronService(
	serviceWrapper = io.veyron.store.veyron.services.syncgroup.gen_impl.SyncGroupServerServiceWrapper.class,
	vdlPathName = "veyron.io/store/veyron/services/syncgroup/SyncGroupServerService"
)
public interface SyncGroupServerService extends com.veyron2.services.security.access.ObjectService {

    
    // Create creates this SyncGroup with the given arguments, and if
// joiner.Name!="", with {joiner, metaData} in its Joiners map.  It is
// expected that acl will give Read and Write access to any device that
// the administrator expects to join and sync; if the acl is empty, a
// default ACL giving access only to the caller is used.  On success,
// Create returns the SyncGroupInfo of the newly created object.
//
// Requires: this SyncGroup must not exist;
// the caller must have write permission at the SyncGroup server;
// the caller's identity must be a prefix of the SyncGroup's name.
// Beware that for Create(), the access label is matched against a
// server-wide ACL; for all other calls the access label is matched
// against the object's ACL.

    public io.veyron.store.veyron.services.syncgroup.SyncGroupInfo create(final com.veyron2.ipc.ServerContext context, final io.veyron.store.veyron.services.syncgroup.SyncGroupConfig createArgs, final io.veyron.store.veyron2.storage.ID rootOID, final io.veyron.store.veyron.services.syncgroup.NameIdentity joiner, final io.veyron.store.veyron.services.syncgroup.JoinerMetaData metaData) throws com.veyron2.ipc.VeyronException;

    
    // Join adds {joiner, metaData} to the SyncGroup's Joiners map and
// returns the SyncGroupInfo for this SyncGroup.  The act of joining
// allows other devices to find the caller, which is still required to
// have read+write access on the SyncGroup to participate in
// synchronization.  A device may call Join again with the same
// NameIdentity in order to change metaData.
// For SyncGroups with large numbers of joiners, Join may return
// a subset of Joiners.
//
// Requires: this SyncGroup must exist;
// the caller must have both read and write permission on the
// SyncGroup.
// TODO(m3b): The label should be read and write; can that be expressed?

    public io.veyron.store.veyron.services.syncgroup.SyncGroupInfo join(final com.veyron2.ipc.ServerContext context, final io.veyron.store.veyron.services.syncgroup.NameIdentity joiner, final io.veyron.store.veyron.services.syncgroup.JoinerMetaData metaData) throws com.veyron2.ipc.VeyronException;

    
    // Leave removes the joiner with the given name/identity from the
// SyncGroup's Joiners map.
//
// Requires: this SyncGroup must exist;
// the caller must assert the identity name.Identity.
// (Thus, a device that Joined may Leave even if it would no longer
// have permission to Join() the SyncGroup.)

    public void leave(final com.veyron2.ipc.ServerContext context, final io.veyron.store.veyron.services.syncgroup.NameIdentity name) throws com.veyron2.ipc.VeyronException;

    
    // Eject is like Leave, but the caller must wield Admin
// privilege on the group, and need not wield name.Identity.
//
// Requires: the SyncGroup must exist;
// the caller must have admin permission on the SyncGroup.

    public void eject(final com.veyron2.ipc.ServerContext context, final io.veyron.store.veyron.services.syncgroup.NameIdentity name) throws com.veyron2.ipc.VeyronException;

    
    // Destroy ejects all devices from the SyncGroup and removes it.
// Devices that had joined will learn of this when their
// SyncGroup object disappears.
//
// Requires: this SyncGroup must exist;
// the caller must have admin permission on the SyncGroup.

    public void destroy(final com.veyron2.ipc.ServerContext context) throws com.veyron2.ipc.VeyronException;

    
    // Get returns the SyncGroupInfo for this SyncGroup.  For SyncGroups
// with a large number of joiners, Get may return a subset of Joiners.
//
// Requires: this SyncGroup must exist;
// the caller must have read permission on the SyncGroup.
// TODO(m3b): This call may be removed when Watch is implemented.

    public io.veyron.store.veyron.services.syncgroup.SyncGroupInfo get(final com.veyron2.ipc.ServerContext context) throws com.veyron2.ipc.VeyronException;

    
    // SetConfig sets the Config field of this SyncGroup.
//
// Requires:  this SyncGroup must exist;
// if non-empty, the eTag must match the value in the object;
// the caller must have admin permission on the SyncGroup.

    public void setConfig(final com.veyron2.ipc.ServerContext context, final io.veyron.store.veyron.services.syncgroup.SyncGroupConfig config, final java.lang.String eTag) throws com.veyron2.ipc.VeyronException;

}
