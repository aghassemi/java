// This file was auto-generated by the veyron vdl tool.
// Source: service.vdl
package io.veyron.store.veyron2.services.store;

/**
 * SyncGroup is the interface to a SyncGroup in the store.
 */

public interface SyncGroup  {

    
    

    
    // CreateSyncGroup creates a new SyncGroup with the given config at the
// SyncGroup server and the corresponding local state in the Store.
// Requires: Receiver must exist in the Store; client must have
// Admin access on the receiver; Store must have Write permission
// at the SyncGroup server; SyncGroup name must not exist at the
// SyncGroup server; receiver must not have any ancestor SyncGroups.

    public void createSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name, final io.veyron.store.veyron2.services.store.SyncGroupConfig config) throws com.veyron2.ipc.VeyronException;
    public void createSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name, final io.veyron.store.veyron2.services.store.SyncGroupConfig config, final com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException;

    
    

    
    // JoinSyncGroup joins a SyncGroup with the specified global Veyron name,
// and creates local state in the Store.
// Requires: If receiver does not exist in the Store, client must be allowed to
// create a new object at the parent; in this case, a new object is created
// with the receiver name, and a nil ACL;
// In case of peer SyncGroups, if the root object of the SyncGroup already
// exists in the Store, receiver must be that root
// object. Store must have Read and Write permission on the SyncGroup at
// the SyncGroup server.

    public void joinSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name) throws com.veyron2.ipc.VeyronException;
    public void joinSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name, final com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException;

    
    

    
    // LeaveSyncGroup leaves the SyncGroup. Upon leaving, all objects in the sub-tree will
// be given new object IDs if there are no remaining peer SyncGroups.
// Data will continue to be accessible under the names
// used before leaving the SyncGroup.
// Requires: client must have Admin access at the receiver.

    public void leaveSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name) throws com.veyron2.ipc.VeyronException;
    public void leaveSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name, final com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException;

    
    

    
    // DestroySyncGroup destroys the SyncGroup. Destroy causes the local Store to leave the
// SyncGroup, and destroys the SyncGroup at the SyncGroup server.
// Requires: Store must have Admin permission on the SyncGroup;
// client must have Admin access at the receiver.

    public void destroySyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name) throws com.veyron2.ipc.VeyronException;
    public void destroySyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name, final com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException;

    
    

    
    // EjectFromSyncGroup ejects a member from the SyncGroup.
// Requires: Store must have Admin permission on the SyncGroup;
// client must have Admin access at the receiver.

    public void ejectFromSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name, final java.lang.String member) throws com.veyron2.ipc.VeyronException;
    public void ejectFromSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name, final java.lang.String member, final com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException;

    
    
    public static class GetSyncGroupConfigOut {
        
        public io.veyron.store.veyron2.services.store.SyncGroupConfig config;
        
        public java.lang.String eTag;
        
    }
    

    
    // GetSyncGroupConfig gets the config info of the SyncGroup. eTag allows for atomic
// read-modify-write of the config by providing optimistic concurrency control.
// Requires: Store must have Read permission on the SyncGroup;
// client must have Admin access at the receiver.

    public io.veyron.store.veyron2.services.store.SyncGroup.GetSyncGroupConfigOut getSyncGroupConfig(final com.veyron2.ipc.Context context, final java.lang.String name) throws com.veyron2.ipc.VeyronException;
    public io.veyron.store.veyron2.services.store.SyncGroup.GetSyncGroupConfigOut getSyncGroupConfig(final com.veyron2.ipc.Context context, final java.lang.String name, final com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException;

    
    

    
    // SetSyncGroupConfig sets the config info of the SyncGroup. eTag value may be either empty,
// or the value from a recent Get. If not empty, Set will only succeed if eTag at
// the server matches that specified in Set.
// Requires: Store must have Admin permission on the SyncGroup;
// client must have Admin access at the receiver.

    public void setSyncGroupConfig(final com.veyron2.ipc.Context context, final java.lang.String name, final io.veyron.store.veyron2.services.store.SyncGroupConfig config, final java.lang.String eTag) throws com.veyron2.ipc.VeyronException;
    public void setSyncGroupConfig(final com.veyron2.ipc.Context context, final java.lang.String name, final io.veyron.store.veyron2.services.store.SyncGroupConfig config, final java.lang.String eTag, final com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException;

    
    

    
    // GetMembersOfSyncGroup gets the Veyron names of the Stores that joined
// this SyncGroup.
// Requires: Store must have Read permission on the SyncGroup;
// client must have Admin access at the receiver.

    public java.util.List<java.lang.String> getMembersOfSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name) throws com.veyron2.ipc.VeyronException;
    public java.util.List<java.lang.String> getMembersOfSyncGroup(final com.veyron2.ipc.Context context, final java.lang.String name, final com.veyron2.Options veyronOpts) throws com.veyron2.ipc.VeyronException;

}
