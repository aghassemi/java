apply plugin: 'java'
apply plugin: 'maven-publish'

dependencies {
    compile group: 'joda-time', name: 'joda-time', version: '2.7'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.google.truth', name: 'truth', version: '0.25'
    testCompile project(':tests')
    testCompile 'org.reflections:reflections:0.9.9-RC1'
}

repositories {
    mavenCentral()
}

clean {
    delete 'generated-src'
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

public static isDarwin() {
    return getOS().contains("os x")
}

public static isLinux() {
    return getOS().contains("linux")
}

public static isAmd64() {
    return getArch().contains("x86_64") || getArch().contains("amd64")
}

public static getArch() {
    return System.properties['os.arch'].toLowerCase()
}

public static getOS() {
    return System.properties['os.name'].toLowerCase()
}

def v23Root = VanadiumEnvironment.getVanadiumEnvironment().v23Root.getAbsolutePath()
def v23Bin = new File(v23Root, ['devtools', 'bin', 'v23'].join(File.separator))

task buildVdlTool(type: Exec) {
    commandLine v23Bin, 'go', 'install', 'v.io/x/ref/cmd/vdl'
}

def vdlPath = [ [v23Root, 'release', 'go', 'src'].join(File.separator),
                [v23Root, 'roadmap', 'go', 'src'].join(File.separator) ].join(':')

def vdlBin = [v23Root, 'release', 'go', 'bin', 'vdl'].join(File.separator)

task generateVdl(type: Exec) {
    environment VDLPATH: vdlPath
    commandLine vdlBin, 'generate', '--lang=java', '--java-out-dir=generated-src/vdl', 'all'
}

sourceSets.main.java.srcDirs += 'generated-src/vdl'
tasks.'compileJava'.dependsOn(generateVdl)

class VanadiumEnvironment {
    File v23Root;
    File v23Bin;
    File thirdPartyGoBinDir;

    public static getVanadiumEnvironment() {
        VanadiumEnvironment result = new VanadiumEnvironment()

        if (!System.getenv().containsKey('V23_ROOT')) {
            throw new InvalidUserDataException("V23_ROOT is not set. "
                    + "Please follow the Vanadium installation instructions at "
                    + "https://v.io/installation/index.html")
        }

        result.v23Root = new File(System.getenv()['V23_ROOT'])
        result.v23Bin = new File(result.v23Root, ['devtools', 'bin', 'v23'].join(File.separator))
        if (!result.v23Bin.exists() || !result.v23Bin.isFile() || !result.v23Bin.canExecute()) {
            throw new InvalidUserDataException(
                    result.v23Bin.toString() + " does not exist or is not an executable file. "
                    + "Please follow the Vanadium installation instructions at "
                    + "https://v.io/installation/index.html")
        }

        result.thirdPartyGoBinDir = new File(result.v23Root,
                ['third_party', 'java', 'go', 'bin'].join(File.separator))
        def thirdPartyGoBin = new File(result.thirdPartyGoBinDir, 'go')
        if (!thirdPartyGoBin.exists() || !thirdPartyGoBin.isFile() || !thirdPartyGoBin.canExecute()) {
            throw new InvalidUserDataException(
                    thirdPartyGoBin.toString() + " does not exist or is not an executable file. "
                    + "You probably didn't setup the java profile. Try running\n\n"
                    + "v23 profile setup java\n\nand then try building again.")
        }
        return result
    }
}

task checkVanadiumEnvironment {
    VanadiumEnvironment.getVanadiumEnvironment()

    if (System.getenv('JAVA_HOME') == null) {
        throw new InvalidUserDataException("The JAVA_HOME environment variable is not set. "
                + "Please set it to the root of a JDK installation directory.  If JDK isn't "
                + "installed, you probably didn't setup the java profile: try running\n\n"
                + "v23 profile setup java\n\nand then try building again.")
    }
    if (!isAmd64()) {
        throw new InvalidUserDataException("Java Vanadium builds only enabled on amd64 "
                + "architectures, not: " + getArch())
    }
    if (!isLinux() && !isDarwin()) {
        throw new InvalidUserDataException("Java Vanadium builds only enabled on "
                + "linux/darwin systems, not: " + getOS())
    }
}

task buildVanadiumLib(type: Exec, dependsOn: checkVanadiumEnvironment) {
    def env = VanadiumEnvironment.getVanadiumEnvironment()
    def existingPath = System.getenv('PATH')
    if (existingPath == null) {
        existingPath = ""
    }

    environment 'V23_PROFILE': 'java'
    environment 'PATH': [env.thirdPartyGoBinDir.getAbsolutePath(), existingPath].join(File.pathSeparator)

    commandLine env.v23Bin.getAbsolutePath(), 'go', 'install',
            '-buildmode=c-shared', '-v', '-tags', 'java', 'v.io/x/jni'
}

// Copy the shared library to its ultimate destination.
if (isLinux()) {
    task copyVanadiumLib(type: Copy) {
        from v23Root + '/roadmap/go/pkg/linux_amd64_shared/v.io/x'
        into 'build/libs'
        include 'jni.a'
        rename 'jni.a', 'libv23.so'
    }
} else {  // darwin
    task copyVanadiumLib(type: Copy) {
        from v23Root + '/roadmap/go/pkg/darwin_amd64/v.io/x'
        into 'build/libs'
        include 'jni.a'
        rename 'jni.a', 'libv23.dylib'
    }
}

// Add shared library dependency to our tests.
tasks.withType(Test) {
    systemProperty "java.library.path", "build/libs"
}

tasks.'processTestResources'.dependsOn(copyVanadiumLib)

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

task natives(type: Jar, dependsOn: buildVanadiumLib) {
    from 'build/libs/libv23.so'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'io.v'
            artifactId 'vanadium'
            version '0.1-SNAPSHOT'

            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            artifact natives {
                classifier "natives"
            }
        }
    }
    repositories {
        maven {
            credentials {
                username 'admin'
                password 'admin123'
            }
            url "http://jring.mtv:8081/nexus/content/repositories/test_repo"
        }
    }
}
