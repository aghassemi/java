// Copyright 2015 The Vanadium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package io.v.android.libs.security;

import com.google.common.collect.ImmutableList;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;

import io.v.v23.android.V;
import io.v.v23.context.VContext;
import io.v.v23.security.Blessings;
import io.v.v23.security.VCertificate;
import io.v.v23.verror.VException;
import io.v.v23.vom.VomUtil;

import java.security.interfaces.ECPublicKey;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Manages {@link Blessings} for a given Android application, persisting them in its
 * shared preferences.
 * <p>
 * This class is thread-safe.
 */
public class BlessingsManager {
    private static final String PREF_NAME = "VanadiumBlessings";
    private static final String PREF_KEY = "VanadiumBlessings";

    private static final String BLESSING_PKG = "io.v.android.apps.account_manager";
    private static final String BLESSING_ACTIVITY = "BlessingActivity";
    private static final String BLESSEE_PUBKEY_KEY = "BLESSEE_PUBKEY";
    private static final String ERROR = "ERROR";
    private static final String REPLY = "REPLY";

    /**
     * Returns the intent used for obtaining a fresh set of {@link Blessings} from the
     * Vanadium Account Manager.
     *
     * @param ctx android context
     */
    public static Intent newRefreshBlessingsIntent(Context ctx) {
        VContext vCtx = V.init(ctx);
        ECPublicKey key = V.getPrincipal(vCtx).publicKey();
        Intent intent = new Intent();
        intent.setComponent(new ComponentName(
                BLESSING_PKG, BLESSING_PKG + "." + BLESSING_ACTIVITY));
        intent.putExtra(BLESSEE_PUBKEY_KEY, key);
        return intent;
    }

    /**
     * Processes the reply from the Vanadium Account Manager generated by the
     * {@link #newRefreshBlessingsIntent} intent, returning the {@link Blessings}
     * stored within.
     *
     * @param  resultCode      result code of the reply
     * @param  data            reply data
     * @return                 the blessings stored in the reply
     * @throws VException      if the blessings couldn't be extracted from the reply
     */
    public static Blessings processBlessingsReply(int resultCode, Intent data)
            throws VException {
        if (data == null) {
            throw new VException("NULL blessing response");
        }
        if (resultCode != Activity.RESULT_OK) {
            throw new VException("Error getting blessing: " + data.getStringExtra(ERROR));
        }
        String blessingsVom = (String) data.getStringExtra(REPLY);
        if (blessingsVom == null || blessingsVom.isEmpty()) {
            throw new VException("Got null blessings.");
        }
        Blessings blessings = (Blessings) VomUtil.decodeFromString(blessingsVom, Blessings.class);
        if (blessings.getCertificateChains() == null ||
                blessings.getCertificateChains().size() <= 0) {
            throw new VException("Got empty blessings.");
        }
        return blessings;
    }

    /**
     * Persists the given {@link Blessings} in the provided {@link Context}'s shared preferences.
     *
     * @param  ctx        {@link Context} where the blessings will be stored
     * @param  blessings  {@link Blessings} to store in the provided {@link Context}
     * @throws VException if the {@link Blessings} couldn't be stored
     */
    public static synchronized void addBlessings(Context ctx, Blessings blessings)
            throws VException {
        String blessingsVom = VomUtil.encodeToString(blessings, Blessings.class);
        SharedPreferences prefs = ctx.getSharedPreferences(PREF_NAME, ctx.MODE_PRIVATE);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putString(PREF_KEY, blessingsVom);
        editor.commit();
    }

    /**
     * Returns the {@link Blessings} persisted in the provided {@link Context}
     * (via {@link #addBlessings}), or {@code null} if no {@link Blessings} were persisted.
     *
     * @param  ctx        {@link Context} from which the blessings are retrieved
     * @return            {@link Blessings} stored in the provided {@link Context}, or {@code null}
     *                    if no {@link Blessings} are stored in the {@link Context}
     * @throws VException if the {@link Blessings} couldn't be retrieved
     */
    public static synchronized Blessings getBlessings(Context ctx) throws VException {
        SharedPreferences prefs = ctx.getSharedPreferences(PREF_NAME, ctx.MODE_PRIVATE);
        String blessingsVom = prefs.getString(PREF_KEY, "");
        if (blessingsVom == null || blessingsVom.isEmpty()) {
            return null;
        }
        return (Blessings) VomUtil.decodeFromString(blessingsVom, Blessings.class);
    }
}